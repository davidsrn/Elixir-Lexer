Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statements statement
Rule 2     statements -> statement
Rule 3     statements -> expression
Rule 4     statement -> CONSTANT expression
Rule 5     statement -> NAME EQUALS expression
Rule 6     statement -> DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
Rule 7     statement -> DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
Rule 8     statement -> IF new_scope expression end_scope DO new_scope statements end_scope END
Rule 9     statement -> IF new_scope expression end_scope DO new_scope statements ELSE new_scope statements end_scope END
Rule 10    statement -> FOR NAME FOREXPR NAME DO new_scope statements end_scope END
Rule 11    expression -> expression PLUS expression
Rule 12    expression -> expression MINUS expression
Rule 13    expression -> expression TIMES expression
Rule 14    expression -> expression DIVIDE expression
Rule 15    expression -> expression GREATER expression
Rule 16    expression -> expression LESS expression
Rule 17    expression -> expression GREATEQ expression
Rule 18    expression -> expression LESSEQ expression
Rule 19    expression -> expression AND expression
Rule 20    expression -> expression OR expression
Rule 21    expression -> MINUS expression
Rule 22    expression -> PARENL new_scope expression end_scope PARENR
Rule 23    expression -> INT
Rule 24    expression -> DOUBLE
Rule 25    expression -> CHAR
Rule 26    expression -> TRUE
Rule 27    expression -> FALSE
Rule 28    expression -> STRING
Rule 29    expression -> NAME
Rule 30    empty -> <empty>
Rule 31    new_scope -> empty
Rule 32    end_scope -> empty

Terminals, with rules where they appear

AND                  : 19
CHAR                 : 25
CONSTANT             : 4
DEF                  : 6 7
DIVIDE               : 14
DO                   : 6 7 8 9 10
DOUBLE               : 24
ELSE                 : 9
END                  : 6 7 8 9 10
EQUALS               : 5
FALSE                : 27
FOR                  : 10
FOREXPR              : 10
GREATEQ              : 17
GREATER              : 15
IF                   : 8 9
INT                  : 23
LESS                 : 16
LESSEQ               : 18
MINUS                : 12 21
NAME                 : 5 6 6 7 10 10 29
OR                   : 20
PARENL               : 6 7 22
PARENR               : 6 7 22
PLUS                 : 11
STRING               : 28
TIMES                : 13
TRUE                 : 26
error                : 

Nonterminals, with rules where they appear

empty                : 7 31 32
end_scope            : 6 7 8 8 9 9 10 22
expression           : 3 4 5 8 9 11 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 22
new_scope            : 6 7 8 8 9 9 9 10 22
statement            : 1 2
statements           : 1 6 7 8 9 9 10 0

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statements -> . expression
    (4) statement -> . CONSTANT expression
    (5) statement -> . NAME EQUALS expression
    (6) statement -> . DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (7) statement -> . DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
    (8) statement -> . IF new_scope expression end_scope DO new_scope statements end_scope END
    (9) statement -> . IF new_scope expression end_scope DO new_scope statements ELSE new_scope statements end_scope END
    (10) statement -> . FOR NAME FOREXPR NAME DO new_scope statements end_scope END
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression GREATER expression
    (16) expression -> . expression LESS expression
    (17) expression -> . expression GREATEQ expression
    (18) expression -> . expression LESSEQ expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression OR expression
    (21) expression -> . MINUS expression
    (22) expression -> . PARENL new_scope expression end_scope PARENR
    (23) expression -> . INT
    (24) expression -> . DOUBLE
    (25) expression -> . CHAR
    (26) expression -> . TRUE
    (27) expression -> . FALSE
    (28) expression -> . STRING
    (29) expression -> . NAME

    CONSTANT        shift and go to state 1
    NAME            shift and go to state 13
    DEF             shift and go to state 6
    IF              shift and go to state 11
    FOR             shift and go to state 9
    MINUS           shift and go to state 5
    PARENL          shift and go to state 10
    INT             shift and go to state 14
    DOUBLE          shift and go to state 15
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 12
    STRING          shift and go to state 7

    statements                     shift and go to state 3
    statement                      shift and go to state 8
    expression                     shift and go to state 16

state 1

    (4) statement -> CONSTANT . expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression GREATER expression
    (16) expression -> . expression LESS expression
    (17) expression -> . expression GREATEQ expression
    (18) expression -> . expression LESSEQ expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression OR expression
    (21) expression -> . MINUS expression
    (22) expression -> . PARENL new_scope expression end_scope PARENR
    (23) expression -> . INT
    (24) expression -> . DOUBLE
    (25) expression -> . CHAR
    (26) expression -> . TRUE
    (27) expression -> . FALSE
    (28) expression -> . STRING
    (29) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 10
    INT             shift and go to state 14
    DOUBLE          shift and go to state 15
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 12
    STRING          shift and go to state 7
    NAME            shift and go to state 17

    expression                     shift and go to state 18

state 2

    (25) expression -> CHAR .

    PLUS            reduce using rule 25 (expression -> CHAR .)
    MINUS           reduce using rule 25 (expression -> CHAR .)
    TIMES           reduce using rule 25 (expression -> CHAR .)
    DIVIDE          reduce using rule 25 (expression -> CHAR .)
    GREATER         reduce using rule 25 (expression -> CHAR .)
    LESS            reduce using rule 25 (expression -> CHAR .)
    GREATEQ         reduce using rule 25 (expression -> CHAR .)
    LESSEQ          reduce using rule 25 (expression -> CHAR .)
    AND             reduce using rule 25 (expression -> CHAR .)
    OR              reduce using rule 25 (expression -> CHAR .)
    CONSTANT        reduce using rule 25 (expression -> CHAR .)
    NAME            reduce using rule 25 (expression -> CHAR .)
    DEF             reduce using rule 25 (expression -> CHAR .)
    IF              reduce using rule 25 (expression -> CHAR .)
    FOR             reduce using rule 25 (expression -> CHAR .)
    $end            reduce using rule 25 (expression -> CHAR .)
    END             reduce using rule 25 (expression -> CHAR .)
    ELSE            reduce using rule 25 (expression -> CHAR .)
    PARENR          reduce using rule 25 (expression -> CHAR .)
    DO              reduce using rule 25 (expression -> CHAR .)


state 3

    (0) S' -> statements .
    (1) statements -> statements . statement
    (4) statement -> . CONSTANT expression
    (5) statement -> . NAME EQUALS expression
    (6) statement -> . DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (7) statement -> . DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
    (8) statement -> . IF new_scope expression end_scope DO new_scope statements end_scope END
    (9) statement -> . IF new_scope expression end_scope DO new_scope statements ELSE new_scope statements end_scope END
    (10) statement -> . FOR NAME FOREXPR NAME DO new_scope statements end_scope END

    CONSTANT        shift and go to state 1
    NAME            shift and go to state 19
    DEF             shift and go to state 6
    IF              shift and go to state 11
    FOR             shift and go to state 9

    statement                      shift and go to state 20

state 4

    (26) expression -> TRUE .

    PLUS            reduce using rule 26 (expression -> TRUE .)
    MINUS           reduce using rule 26 (expression -> TRUE .)
    TIMES           reduce using rule 26 (expression -> TRUE .)
    DIVIDE          reduce using rule 26 (expression -> TRUE .)
    GREATER         reduce using rule 26 (expression -> TRUE .)
    LESS            reduce using rule 26 (expression -> TRUE .)
    GREATEQ         reduce using rule 26 (expression -> TRUE .)
    LESSEQ          reduce using rule 26 (expression -> TRUE .)
    AND             reduce using rule 26 (expression -> TRUE .)
    OR              reduce using rule 26 (expression -> TRUE .)
    CONSTANT        reduce using rule 26 (expression -> TRUE .)
    NAME            reduce using rule 26 (expression -> TRUE .)
    DEF             reduce using rule 26 (expression -> TRUE .)
    IF              reduce using rule 26 (expression -> TRUE .)
    FOR             reduce using rule 26 (expression -> TRUE .)
    $end            reduce using rule 26 (expression -> TRUE .)
    END             reduce using rule 26 (expression -> TRUE .)
    ELSE            reduce using rule 26 (expression -> TRUE .)
    PARENR          reduce using rule 26 (expression -> TRUE .)
    DO              reduce using rule 26 (expression -> TRUE .)


state 5

    (21) expression -> MINUS . expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression GREATER expression
    (16) expression -> . expression LESS expression
    (17) expression -> . expression GREATEQ expression
    (18) expression -> . expression LESSEQ expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression OR expression
    (21) expression -> . MINUS expression
    (22) expression -> . PARENL new_scope expression end_scope PARENR
    (23) expression -> . INT
    (24) expression -> . DOUBLE
    (25) expression -> . CHAR
    (26) expression -> . TRUE
    (27) expression -> . FALSE
    (28) expression -> . STRING
    (29) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 10
    INT             shift and go to state 14
    DOUBLE          shift and go to state 15
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 12
    STRING          shift and go to state 7
    NAME            shift and go to state 17

    expression                     shift and go to state 21

state 6

    (6) statement -> DEF . NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (7) statement -> DEF . NAME PARENL empty PARENR DO new_scope statements end_scope END

    NAME            shift and go to state 22


state 7

    (28) expression -> STRING .

    PLUS            reduce using rule 28 (expression -> STRING .)
    MINUS           reduce using rule 28 (expression -> STRING .)
    TIMES           reduce using rule 28 (expression -> STRING .)
    DIVIDE          reduce using rule 28 (expression -> STRING .)
    GREATER         reduce using rule 28 (expression -> STRING .)
    LESS            reduce using rule 28 (expression -> STRING .)
    GREATEQ         reduce using rule 28 (expression -> STRING .)
    LESSEQ          reduce using rule 28 (expression -> STRING .)
    AND             reduce using rule 28 (expression -> STRING .)
    OR              reduce using rule 28 (expression -> STRING .)
    CONSTANT        reduce using rule 28 (expression -> STRING .)
    NAME            reduce using rule 28 (expression -> STRING .)
    DEF             reduce using rule 28 (expression -> STRING .)
    IF              reduce using rule 28 (expression -> STRING .)
    FOR             reduce using rule 28 (expression -> STRING .)
    $end            reduce using rule 28 (expression -> STRING .)
    END             reduce using rule 28 (expression -> STRING .)
    ELSE            reduce using rule 28 (expression -> STRING .)
    PARENR          reduce using rule 28 (expression -> STRING .)
    DO              reduce using rule 28 (expression -> STRING .)


state 8

    (2) statements -> statement .

    CONSTANT        reduce using rule 2 (statements -> statement .)
    NAME            reduce using rule 2 (statements -> statement .)
    DEF             reduce using rule 2 (statements -> statement .)
    IF              reduce using rule 2 (statements -> statement .)
    FOR             reduce using rule 2 (statements -> statement .)
    END             reduce using rule 2 (statements -> statement .)
    $end            reduce using rule 2 (statements -> statement .)
    ELSE            reduce using rule 2 (statements -> statement .)


state 9

    (10) statement -> FOR . NAME FOREXPR NAME DO new_scope statements end_scope END

    NAME            shift and go to state 23


state 10

    (22) expression -> PARENL . new_scope expression end_scope PARENR
    (31) new_scope -> . empty
    (30) empty -> .

    MINUS           reduce using rule 30 (empty -> .)
    PARENL          reduce using rule 30 (empty -> .)
    INT             reduce using rule 30 (empty -> .)
    DOUBLE          reduce using rule 30 (empty -> .)
    CHAR            reduce using rule 30 (empty -> .)
    TRUE            reduce using rule 30 (empty -> .)
    FALSE           reduce using rule 30 (empty -> .)
    STRING          reduce using rule 30 (empty -> .)
    NAME            reduce using rule 30 (empty -> .)

    new_scope                      shift and go to state 24
    empty                          shift and go to state 25

state 11

    (8) statement -> IF . new_scope expression end_scope DO new_scope statements end_scope END
    (9) statement -> IF . new_scope expression end_scope DO new_scope statements ELSE new_scope statements end_scope END
    (31) new_scope -> . empty
    (30) empty -> .

    MINUS           reduce using rule 30 (empty -> .)
    PARENL          reduce using rule 30 (empty -> .)
    INT             reduce using rule 30 (empty -> .)
    DOUBLE          reduce using rule 30 (empty -> .)
    CHAR            reduce using rule 30 (empty -> .)
    TRUE            reduce using rule 30 (empty -> .)
    FALSE           reduce using rule 30 (empty -> .)
    STRING          reduce using rule 30 (empty -> .)
    NAME            reduce using rule 30 (empty -> .)

    new_scope                      shift and go to state 26
    empty                          shift and go to state 25

state 12

    (27) expression -> FALSE .

    PLUS            reduce using rule 27 (expression -> FALSE .)
    MINUS           reduce using rule 27 (expression -> FALSE .)
    TIMES           reduce using rule 27 (expression -> FALSE .)
    DIVIDE          reduce using rule 27 (expression -> FALSE .)
    GREATER         reduce using rule 27 (expression -> FALSE .)
    LESS            reduce using rule 27 (expression -> FALSE .)
    GREATEQ         reduce using rule 27 (expression -> FALSE .)
    LESSEQ          reduce using rule 27 (expression -> FALSE .)
    AND             reduce using rule 27 (expression -> FALSE .)
    OR              reduce using rule 27 (expression -> FALSE .)
    CONSTANT        reduce using rule 27 (expression -> FALSE .)
    NAME            reduce using rule 27 (expression -> FALSE .)
    DEF             reduce using rule 27 (expression -> FALSE .)
    IF              reduce using rule 27 (expression -> FALSE .)
    FOR             reduce using rule 27 (expression -> FALSE .)
    $end            reduce using rule 27 (expression -> FALSE .)
    END             reduce using rule 27 (expression -> FALSE .)
    ELSE            reduce using rule 27 (expression -> FALSE .)
    PARENR          reduce using rule 27 (expression -> FALSE .)
    DO              reduce using rule 27 (expression -> FALSE .)


state 13

    (5) statement -> NAME . EQUALS expression
    (29) expression -> NAME .

    EQUALS          shift and go to state 27
    PLUS            reduce using rule 29 (expression -> NAME .)
    MINUS           reduce using rule 29 (expression -> NAME .)
    TIMES           reduce using rule 29 (expression -> NAME .)
    DIVIDE          reduce using rule 29 (expression -> NAME .)
    GREATER         reduce using rule 29 (expression -> NAME .)
    LESS            reduce using rule 29 (expression -> NAME .)
    GREATEQ         reduce using rule 29 (expression -> NAME .)
    LESSEQ          reduce using rule 29 (expression -> NAME .)
    AND             reduce using rule 29 (expression -> NAME .)
    OR              reduce using rule 29 (expression -> NAME .)
    CONSTANT        reduce using rule 29 (expression -> NAME .)
    NAME            reduce using rule 29 (expression -> NAME .)
    DEF             reduce using rule 29 (expression -> NAME .)
    IF              reduce using rule 29 (expression -> NAME .)
    FOR             reduce using rule 29 (expression -> NAME .)
    END             reduce using rule 29 (expression -> NAME .)
    ELSE            reduce using rule 29 (expression -> NAME .)
    $end            reduce using rule 29 (expression -> NAME .)


state 14

    (23) expression -> INT .

    PLUS            reduce using rule 23 (expression -> INT .)
    MINUS           reduce using rule 23 (expression -> INT .)
    TIMES           reduce using rule 23 (expression -> INT .)
    DIVIDE          reduce using rule 23 (expression -> INT .)
    GREATER         reduce using rule 23 (expression -> INT .)
    LESS            reduce using rule 23 (expression -> INT .)
    GREATEQ         reduce using rule 23 (expression -> INT .)
    LESSEQ          reduce using rule 23 (expression -> INT .)
    AND             reduce using rule 23 (expression -> INT .)
    OR              reduce using rule 23 (expression -> INT .)
    CONSTANT        reduce using rule 23 (expression -> INT .)
    NAME            reduce using rule 23 (expression -> INT .)
    DEF             reduce using rule 23 (expression -> INT .)
    IF              reduce using rule 23 (expression -> INT .)
    FOR             reduce using rule 23 (expression -> INT .)
    $end            reduce using rule 23 (expression -> INT .)
    END             reduce using rule 23 (expression -> INT .)
    ELSE            reduce using rule 23 (expression -> INT .)
    PARENR          reduce using rule 23 (expression -> INT .)
    DO              reduce using rule 23 (expression -> INT .)


state 15

    (24) expression -> DOUBLE .

    PLUS            reduce using rule 24 (expression -> DOUBLE .)
    MINUS           reduce using rule 24 (expression -> DOUBLE .)
    TIMES           reduce using rule 24 (expression -> DOUBLE .)
    DIVIDE          reduce using rule 24 (expression -> DOUBLE .)
    GREATER         reduce using rule 24 (expression -> DOUBLE .)
    LESS            reduce using rule 24 (expression -> DOUBLE .)
    GREATEQ         reduce using rule 24 (expression -> DOUBLE .)
    LESSEQ          reduce using rule 24 (expression -> DOUBLE .)
    AND             reduce using rule 24 (expression -> DOUBLE .)
    OR              reduce using rule 24 (expression -> DOUBLE .)
    CONSTANT        reduce using rule 24 (expression -> DOUBLE .)
    NAME            reduce using rule 24 (expression -> DOUBLE .)
    DEF             reduce using rule 24 (expression -> DOUBLE .)
    IF              reduce using rule 24 (expression -> DOUBLE .)
    FOR             reduce using rule 24 (expression -> DOUBLE .)
    $end            reduce using rule 24 (expression -> DOUBLE .)
    END             reduce using rule 24 (expression -> DOUBLE .)
    ELSE            reduce using rule 24 (expression -> DOUBLE .)
    PARENR          reduce using rule 24 (expression -> DOUBLE .)
    DO              reduce using rule 24 (expression -> DOUBLE .)


state 16

    (3) statements -> expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . GREATER expression
    (16) expression -> expression . LESS expression
    (17) expression -> expression . GREATEQ expression
    (18) expression -> expression . LESSEQ expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . OR expression

    CONSTANT        reduce using rule 3 (statements -> expression .)
    NAME            reduce using rule 3 (statements -> expression .)
    DEF             reduce using rule 3 (statements -> expression .)
    IF              reduce using rule 3 (statements -> expression .)
    FOR             reduce using rule 3 (statements -> expression .)
    END             reduce using rule 3 (statements -> expression .)
    $end            reduce using rule 3 (statements -> expression .)
    ELSE            reduce using rule 3 (statements -> expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 30
    GREATER         shift and go to state 37
    LESS            shift and go to state 32
    GREATEQ         shift and go to state 31
    LESSEQ          shift and go to state 34
    AND             shift and go to state 28
    OR              shift and go to state 29


state 17

    (29) expression -> NAME .

    PLUS            reduce using rule 29 (expression -> NAME .)
    MINUS           reduce using rule 29 (expression -> NAME .)
    TIMES           reduce using rule 29 (expression -> NAME .)
    DIVIDE          reduce using rule 29 (expression -> NAME .)
    GREATER         reduce using rule 29 (expression -> NAME .)
    LESS            reduce using rule 29 (expression -> NAME .)
    GREATEQ         reduce using rule 29 (expression -> NAME .)
    LESSEQ          reduce using rule 29 (expression -> NAME .)
    AND             reduce using rule 29 (expression -> NAME .)
    OR              reduce using rule 29 (expression -> NAME .)
    CONSTANT        reduce using rule 29 (expression -> NAME .)
    NAME            reduce using rule 29 (expression -> NAME .)
    DEF             reduce using rule 29 (expression -> NAME .)
    IF              reduce using rule 29 (expression -> NAME .)
    FOR             reduce using rule 29 (expression -> NAME .)
    $end            reduce using rule 29 (expression -> NAME .)
    END             reduce using rule 29 (expression -> NAME .)
    ELSE            reduce using rule 29 (expression -> NAME .)
    PARENR          reduce using rule 29 (expression -> NAME .)
    DO              reduce using rule 29 (expression -> NAME .)


state 18

    (4) statement -> CONSTANT expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . GREATER expression
    (16) expression -> expression . LESS expression
    (17) expression -> expression . GREATEQ expression
    (18) expression -> expression . LESSEQ expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . OR expression

    ELSE            reduce using rule 4 (statement -> CONSTANT expression .)
    CONSTANT        reduce using rule 4 (statement -> CONSTANT expression .)
    NAME            reduce using rule 4 (statement -> CONSTANT expression .)
    DEF             reduce using rule 4 (statement -> CONSTANT expression .)
    IF              reduce using rule 4 (statement -> CONSTANT expression .)
    FOR             reduce using rule 4 (statement -> CONSTANT expression .)
    END             reduce using rule 4 (statement -> CONSTANT expression .)
    $end            reduce using rule 4 (statement -> CONSTANT expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 30
    GREATER         shift and go to state 37
    LESS            shift and go to state 32
    GREATEQ         shift and go to state 31
    LESSEQ          shift and go to state 34
    AND             shift and go to state 28
    OR              shift and go to state 29


state 19

    (5) statement -> NAME . EQUALS expression

    EQUALS          shift and go to state 27


state 20

    (1) statements -> statements statement .

    CONSTANT        reduce using rule 1 (statements -> statements statement .)
    NAME            reduce using rule 1 (statements -> statements statement .)
    DEF             reduce using rule 1 (statements -> statements statement .)
    IF              reduce using rule 1 (statements -> statements statement .)
    FOR             reduce using rule 1 (statements -> statements statement .)
    END             reduce using rule 1 (statements -> statements statement .)
    $end            reduce using rule 1 (statements -> statements statement .)
    ELSE            reduce using rule 1 (statements -> statements statement .)


state 21

    (21) expression -> MINUS expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . GREATER expression
    (16) expression -> expression . LESS expression
    (17) expression -> expression . GREATEQ expression
    (18) expression -> expression . LESSEQ expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . OR expression

    PLUS            reduce using rule 21 (expression -> MINUS expression .)
    MINUS           reduce using rule 21 (expression -> MINUS expression .)
    TIMES           reduce using rule 21 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 21 (expression -> MINUS expression .)
    GREATER         reduce using rule 21 (expression -> MINUS expression .)
    LESS            reduce using rule 21 (expression -> MINUS expression .)
    GREATEQ         reduce using rule 21 (expression -> MINUS expression .)
    LESSEQ          reduce using rule 21 (expression -> MINUS expression .)
    AND             reduce using rule 21 (expression -> MINUS expression .)
    OR              reduce using rule 21 (expression -> MINUS expression .)
    CONSTANT        reduce using rule 21 (expression -> MINUS expression .)
    NAME            reduce using rule 21 (expression -> MINUS expression .)
    DEF             reduce using rule 21 (expression -> MINUS expression .)
    IF              reduce using rule 21 (expression -> MINUS expression .)
    FOR             reduce using rule 21 (expression -> MINUS expression .)
    $end            reduce using rule 21 (expression -> MINUS expression .)
    END             reduce using rule 21 (expression -> MINUS expression .)
    ELSE            reduce using rule 21 (expression -> MINUS expression .)
    PARENR          reduce using rule 21 (expression -> MINUS expression .)
    DO              reduce using rule 21 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 35 ]
  ! MINUS           [ shift and go to state 36 ]
  ! TIMES           [ shift and go to state 33 ]
  ! DIVIDE          [ shift and go to state 30 ]
  ! GREATER         [ shift and go to state 37 ]
  ! LESS            [ shift and go to state 32 ]
  ! GREATEQ         [ shift and go to state 31 ]
  ! LESSEQ          [ shift and go to state 34 ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 29 ]


state 22

    (6) statement -> DEF NAME . PARENL NAME PARENR DO new_scope statements end_scope END
    (7) statement -> DEF NAME . PARENL empty PARENR DO new_scope statements end_scope END

    PARENL          shift and go to state 38


state 23

    (10) statement -> FOR NAME . FOREXPR NAME DO new_scope statements end_scope END

    FOREXPR         shift and go to state 39


state 24

    (22) expression -> PARENL new_scope . expression end_scope PARENR
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression GREATER expression
    (16) expression -> . expression LESS expression
    (17) expression -> . expression GREATEQ expression
    (18) expression -> . expression LESSEQ expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression OR expression
    (21) expression -> . MINUS expression
    (22) expression -> . PARENL new_scope expression end_scope PARENR
    (23) expression -> . INT
    (24) expression -> . DOUBLE
    (25) expression -> . CHAR
    (26) expression -> . TRUE
    (27) expression -> . FALSE
    (28) expression -> . STRING
    (29) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 10
    INT             shift and go to state 14
    DOUBLE          shift and go to state 15
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 12
    STRING          shift and go to state 7
    NAME            shift and go to state 17

    expression                     shift and go to state 40

state 25

    (31) new_scope -> empty .

    MINUS           reduce using rule 31 (new_scope -> empty .)
    PARENL          reduce using rule 31 (new_scope -> empty .)
    INT             reduce using rule 31 (new_scope -> empty .)
    DOUBLE          reduce using rule 31 (new_scope -> empty .)
    CHAR            reduce using rule 31 (new_scope -> empty .)
    TRUE            reduce using rule 31 (new_scope -> empty .)
    FALSE           reduce using rule 31 (new_scope -> empty .)
    STRING          reduce using rule 31 (new_scope -> empty .)
    NAME            reduce using rule 31 (new_scope -> empty .)
    CONSTANT        reduce using rule 31 (new_scope -> empty .)
    DEF             reduce using rule 31 (new_scope -> empty .)
    IF              reduce using rule 31 (new_scope -> empty .)
    FOR             reduce using rule 31 (new_scope -> empty .)


state 26

    (8) statement -> IF new_scope . expression end_scope DO new_scope statements end_scope END
    (9) statement -> IF new_scope . expression end_scope DO new_scope statements ELSE new_scope statements end_scope END
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression GREATER expression
    (16) expression -> . expression LESS expression
    (17) expression -> . expression GREATEQ expression
    (18) expression -> . expression LESSEQ expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression OR expression
    (21) expression -> . MINUS expression
    (22) expression -> . PARENL new_scope expression end_scope PARENR
    (23) expression -> . INT
    (24) expression -> . DOUBLE
    (25) expression -> . CHAR
    (26) expression -> . TRUE
    (27) expression -> . FALSE
    (28) expression -> . STRING
    (29) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 10
    INT             shift and go to state 14
    DOUBLE          shift and go to state 15
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 12
    STRING          shift and go to state 7
    NAME            shift and go to state 17

    expression                     shift and go to state 41

state 27

    (5) statement -> NAME EQUALS . expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression GREATER expression
    (16) expression -> . expression LESS expression
    (17) expression -> . expression GREATEQ expression
    (18) expression -> . expression LESSEQ expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression OR expression
    (21) expression -> . MINUS expression
    (22) expression -> . PARENL new_scope expression end_scope PARENR
    (23) expression -> . INT
    (24) expression -> . DOUBLE
    (25) expression -> . CHAR
    (26) expression -> . TRUE
    (27) expression -> . FALSE
    (28) expression -> . STRING
    (29) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 10
    INT             shift and go to state 14
    DOUBLE          shift and go to state 15
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 12
    STRING          shift and go to state 7
    NAME            shift and go to state 17

    expression                     shift and go to state 42

state 28

    (19) expression -> expression AND . expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression GREATER expression
    (16) expression -> . expression LESS expression
    (17) expression -> . expression GREATEQ expression
    (18) expression -> . expression LESSEQ expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression OR expression
    (21) expression -> . MINUS expression
    (22) expression -> . PARENL new_scope expression end_scope PARENR
    (23) expression -> . INT
    (24) expression -> . DOUBLE
    (25) expression -> . CHAR
    (26) expression -> . TRUE
    (27) expression -> . FALSE
    (28) expression -> . STRING
    (29) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 10
    INT             shift and go to state 14
    DOUBLE          shift and go to state 15
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 12
    STRING          shift and go to state 7
    NAME            shift and go to state 17

    expression                     shift and go to state 43

state 29

    (20) expression -> expression OR . expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression GREATER expression
    (16) expression -> . expression LESS expression
    (17) expression -> . expression GREATEQ expression
    (18) expression -> . expression LESSEQ expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression OR expression
    (21) expression -> . MINUS expression
    (22) expression -> . PARENL new_scope expression end_scope PARENR
    (23) expression -> . INT
    (24) expression -> . DOUBLE
    (25) expression -> . CHAR
    (26) expression -> . TRUE
    (27) expression -> . FALSE
    (28) expression -> . STRING
    (29) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 10
    INT             shift and go to state 14
    DOUBLE          shift and go to state 15
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 12
    STRING          shift and go to state 7
    NAME            shift and go to state 17

    expression                     shift and go to state 44

state 30

    (14) expression -> expression DIVIDE . expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression GREATER expression
    (16) expression -> . expression LESS expression
    (17) expression -> . expression GREATEQ expression
    (18) expression -> . expression LESSEQ expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression OR expression
    (21) expression -> . MINUS expression
    (22) expression -> . PARENL new_scope expression end_scope PARENR
    (23) expression -> . INT
    (24) expression -> . DOUBLE
    (25) expression -> . CHAR
    (26) expression -> . TRUE
    (27) expression -> . FALSE
    (28) expression -> . STRING
    (29) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 10
    INT             shift and go to state 14
    DOUBLE          shift and go to state 15
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 12
    STRING          shift and go to state 7
    NAME            shift and go to state 17

    expression                     shift and go to state 45

state 31

    (17) expression -> expression GREATEQ . expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression GREATER expression
    (16) expression -> . expression LESS expression
    (17) expression -> . expression GREATEQ expression
    (18) expression -> . expression LESSEQ expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression OR expression
    (21) expression -> . MINUS expression
    (22) expression -> . PARENL new_scope expression end_scope PARENR
    (23) expression -> . INT
    (24) expression -> . DOUBLE
    (25) expression -> . CHAR
    (26) expression -> . TRUE
    (27) expression -> . FALSE
    (28) expression -> . STRING
    (29) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 10
    INT             shift and go to state 14
    DOUBLE          shift and go to state 15
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 12
    STRING          shift and go to state 7
    NAME            shift and go to state 17

    expression                     shift and go to state 46

state 32

    (16) expression -> expression LESS . expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression GREATER expression
    (16) expression -> . expression LESS expression
    (17) expression -> . expression GREATEQ expression
    (18) expression -> . expression LESSEQ expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression OR expression
    (21) expression -> . MINUS expression
    (22) expression -> . PARENL new_scope expression end_scope PARENR
    (23) expression -> . INT
    (24) expression -> . DOUBLE
    (25) expression -> . CHAR
    (26) expression -> . TRUE
    (27) expression -> . FALSE
    (28) expression -> . STRING
    (29) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 10
    INT             shift and go to state 14
    DOUBLE          shift and go to state 15
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 12
    STRING          shift and go to state 7
    NAME            shift and go to state 17

    expression                     shift and go to state 47

state 33

    (13) expression -> expression TIMES . expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression GREATER expression
    (16) expression -> . expression LESS expression
    (17) expression -> . expression GREATEQ expression
    (18) expression -> . expression LESSEQ expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression OR expression
    (21) expression -> . MINUS expression
    (22) expression -> . PARENL new_scope expression end_scope PARENR
    (23) expression -> . INT
    (24) expression -> . DOUBLE
    (25) expression -> . CHAR
    (26) expression -> . TRUE
    (27) expression -> . FALSE
    (28) expression -> . STRING
    (29) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 10
    INT             shift and go to state 14
    DOUBLE          shift and go to state 15
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 12
    STRING          shift and go to state 7
    NAME            shift and go to state 17

    expression                     shift and go to state 48

state 34

    (18) expression -> expression LESSEQ . expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression GREATER expression
    (16) expression -> . expression LESS expression
    (17) expression -> . expression GREATEQ expression
    (18) expression -> . expression LESSEQ expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression OR expression
    (21) expression -> . MINUS expression
    (22) expression -> . PARENL new_scope expression end_scope PARENR
    (23) expression -> . INT
    (24) expression -> . DOUBLE
    (25) expression -> . CHAR
    (26) expression -> . TRUE
    (27) expression -> . FALSE
    (28) expression -> . STRING
    (29) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 10
    INT             shift and go to state 14
    DOUBLE          shift and go to state 15
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 12
    STRING          shift and go to state 7
    NAME            shift and go to state 17

    expression                     shift and go to state 49

state 35

    (11) expression -> expression PLUS . expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression GREATER expression
    (16) expression -> . expression LESS expression
    (17) expression -> . expression GREATEQ expression
    (18) expression -> . expression LESSEQ expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression OR expression
    (21) expression -> . MINUS expression
    (22) expression -> . PARENL new_scope expression end_scope PARENR
    (23) expression -> . INT
    (24) expression -> . DOUBLE
    (25) expression -> . CHAR
    (26) expression -> . TRUE
    (27) expression -> . FALSE
    (28) expression -> . STRING
    (29) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 10
    INT             shift and go to state 14
    DOUBLE          shift and go to state 15
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 12
    STRING          shift and go to state 7
    NAME            shift and go to state 17

    expression                     shift and go to state 50

state 36

    (12) expression -> expression MINUS . expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression GREATER expression
    (16) expression -> . expression LESS expression
    (17) expression -> . expression GREATEQ expression
    (18) expression -> . expression LESSEQ expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression OR expression
    (21) expression -> . MINUS expression
    (22) expression -> . PARENL new_scope expression end_scope PARENR
    (23) expression -> . INT
    (24) expression -> . DOUBLE
    (25) expression -> . CHAR
    (26) expression -> . TRUE
    (27) expression -> . FALSE
    (28) expression -> . STRING
    (29) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 10
    INT             shift and go to state 14
    DOUBLE          shift and go to state 15
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 12
    STRING          shift and go to state 7
    NAME            shift and go to state 17

    expression                     shift and go to state 51

state 37

    (15) expression -> expression GREATER . expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression GREATER expression
    (16) expression -> . expression LESS expression
    (17) expression -> . expression GREATEQ expression
    (18) expression -> . expression LESSEQ expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression OR expression
    (21) expression -> . MINUS expression
    (22) expression -> . PARENL new_scope expression end_scope PARENR
    (23) expression -> . INT
    (24) expression -> . DOUBLE
    (25) expression -> . CHAR
    (26) expression -> . TRUE
    (27) expression -> . FALSE
    (28) expression -> . STRING
    (29) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 10
    INT             shift and go to state 14
    DOUBLE          shift and go to state 15
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 12
    STRING          shift and go to state 7
    NAME            shift and go to state 17

    expression                     shift and go to state 52

state 38

    (6) statement -> DEF NAME PARENL . NAME PARENR DO new_scope statements end_scope END
    (7) statement -> DEF NAME PARENL . empty PARENR DO new_scope statements end_scope END
    (30) empty -> .

    NAME            shift and go to state 53
    PARENR          reduce using rule 30 (empty -> .)

    empty                          shift and go to state 54

state 39

    (10) statement -> FOR NAME FOREXPR . NAME DO new_scope statements end_scope END

    NAME            shift and go to state 55


state 40

    (22) expression -> PARENL new_scope expression . end_scope PARENR
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . GREATER expression
    (16) expression -> expression . LESS expression
    (17) expression -> expression . GREATEQ expression
    (18) expression -> expression . LESSEQ expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . OR expression
    (32) end_scope -> . empty
    (30) empty -> .

    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 30
    GREATER         shift and go to state 37
    LESS            shift and go to state 32
    GREATEQ         shift and go to state 31
    LESSEQ          shift and go to state 34
    AND             shift and go to state 28
    OR              shift and go to state 29
    PARENR          reduce using rule 30 (empty -> .)

    empty                          shift and go to state 57
    end_scope                      shift and go to state 56

state 41

    (8) statement -> IF new_scope expression . end_scope DO new_scope statements end_scope END
    (9) statement -> IF new_scope expression . end_scope DO new_scope statements ELSE new_scope statements end_scope END
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . GREATER expression
    (16) expression -> expression . LESS expression
    (17) expression -> expression . GREATEQ expression
    (18) expression -> expression . LESSEQ expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . OR expression
    (32) end_scope -> . empty
    (30) empty -> .

    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 30
    GREATER         shift and go to state 37
    LESS            shift and go to state 32
    GREATEQ         shift and go to state 31
    LESSEQ          shift and go to state 34
    AND             shift and go to state 28
    OR              shift and go to state 29
    DO              reduce using rule 30 (empty -> .)

    empty                          shift and go to state 57
    end_scope                      shift and go to state 58

state 42

    (5) statement -> NAME EQUALS expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . GREATER expression
    (16) expression -> expression . LESS expression
    (17) expression -> expression . GREATEQ expression
    (18) expression -> expression . LESSEQ expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . OR expression

    ELSE            reduce using rule 5 (statement -> NAME EQUALS expression .)
    CONSTANT        reduce using rule 5 (statement -> NAME EQUALS expression .)
    NAME            reduce using rule 5 (statement -> NAME EQUALS expression .)
    DEF             reduce using rule 5 (statement -> NAME EQUALS expression .)
    IF              reduce using rule 5 (statement -> NAME EQUALS expression .)
    FOR             reduce using rule 5 (statement -> NAME EQUALS expression .)
    END             reduce using rule 5 (statement -> NAME EQUALS expression .)
    $end            reduce using rule 5 (statement -> NAME EQUALS expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 30
    GREATER         shift and go to state 37
    LESS            shift and go to state 32
    GREATEQ         shift and go to state 31
    LESSEQ          shift and go to state 34
    AND             shift and go to state 28
    OR              shift and go to state 29


state 43

    (19) expression -> expression AND expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . GREATER expression
    (16) expression -> expression . LESS expression
    (17) expression -> expression . GREATEQ expression
    (18) expression -> expression . LESSEQ expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . OR expression

    AND             reduce using rule 19 (expression -> expression AND expression .)
    OR              reduce using rule 19 (expression -> expression AND expression .)
    CONSTANT        reduce using rule 19 (expression -> expression AND expression .)
    NAME            reduce using rule 19 (expression -> expression AND expression .)
    DEF             reduce using rule 19 (expression -> expression AND expression .)
    IF              reduce using rule 19 (expression -> expression AND expression .)
    FOR             reduce using rule 19 (expression -> expression AND expression .)
    $end            reduce using rule 19 (expression -> expression AND expression .)
    END             reduce using rule 19 (expression -> expression AND expression .)
    ELSE            reduce using rule 19 (expression -> expression AND expression .)
    PARENR          reduce using rule 19 (expression -> expression AND expression .)
    DO              reduce using rule 19 (expression -> expression AND expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 30
    GREATER         shift and go to state 37
    LESS            shift and go to state 32
    GREATEQ         shift and go to state 31
    LESSEQ          shift and go to state 34

  ! PLUS            [ reduce using rule 19 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 19 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 19 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 19 (expression -> expression AND expression .) ]
  ! GREATER         [ reduce using rule 19 (expression -> expression AND expression .) ]
  ! LESS            [ reduce using rule 19 (expression -> expression AND expression .) ]
  ! GREATEQ         [ reduce using rule 19 (expression -> expression AND expression .) ]
  ! LESSEQ          [ reduce using rule 19 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 29 ]


state 44

    (20) expression -> expression OR expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . GREATER expression
    (16) expression -> expression . LESS expression
    (17) expression -> expression . GREATEQ expression
    (18) expression -> expression . LESSEQ expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . OR expression

    AND             reduce using rule 20 (expression -> expression OR expression .)
    OR              reduce using rule 20 (expression -> expression OR expression .)
    CONSTANT        reduce using rule 20 (expression -> expression OR expression .)
    NAME            reduce using rule 20 (expression -> expression OR expression .)
    DEF             reduce using rule 20 (expression -> expression OR expression .)
    IF              reduce using rule 20 (expression -> expression OR expression .)
    FOR             reduce using rule 20 (expression -> expression OR expression .)
    $end            reduce using rule 20 (expression -> expression OR expression .)
    END             reduce using rule 20 (expression -> expression OR expression .)
    ELSE            reduce using rule 20 (expression -> expression OR expression .)
    PARENR          reduce using rule 20 (expression -> expression OR expression .)
    DO              reduce using rule 20 (expression -> expression OR expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 30
    GREATER         shift and go to state 37
    LESS            shift and go to state 32
    GREATEQ         shift and go to state 31
    LESSEQ          shift and go to state 34

  ! PLUS            [ reduce using rule 20 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 20 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 20 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 20 (expression -> expression OR expression .) ]
  ! GREATER         [ reduce using rule 20 (expression -> expression OR expression .) ]
  ! LESS            [ reduce using rule 20 (expression -> expression OR expression .) ]
  ! GREATEQ         [ reduce using rule 20 (expression -> expression OR expression .) ]
  ! LESSEQ          [ reduce using rule 20 (expression -> expression OR expression .) ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 29 ]


state 45

    (14) expression -> expression DIVIDE expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . GREATER expression
    (16) expression -> expression . LESS expression
    (17) expression -> expression . GREATEQ expression
    (18) expression -> expression . LESSEQ expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . OR expression

    PLUS            reduce using rule 14 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 14 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 14 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 14 (expression -> expression DIVIDE expression .)
    GREATER         reduce using rule 14 (expression -> expression DIVIDE expression .)
    LESS            reduce using rule 14 (expression -> expression DIVIDE expression .)
    GREATEQ         reduce using rule 14 (expression -> expression DIVIDE expression .)
    LESSEQ          reduce using rule 14 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 14 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 14 (expression -> expression DIVIDE expression .)
    CONSTANT        reduce using rule 14 (expression -> expression DIVIDE expression .)
    NAME            reduce using rule 14 (expression -> expression DIVIDE expression .)
    DEF             reduce using rule 14 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 14 (expression -> expression DIVIDE expression .)
    FOR             reduce using rule 14 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 14 (expression -> expression DIVIDE expression .)
    END             reduce using rule 14 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 14 (expression -> expression DIVIDE expression .)
    PARENR          reduce using rule 14 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 14 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 35 ]
  ! MINUS           [ shift and go to state 36 ]
  ! TIMES           [ shift and go to state 33 ]
  ! DIVIDE          [ shift and go to state 30 ]
  ! GREATER         [ shift and go to state 37 ]
  ! LESS            [ shift and go to state 32 ]
  ! GREATEQ         [ shift and go to state 31 ]
  ! LESSEQ          [ shift and go to state 34 ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 29 ]


state 46

    (17) expression -> expression GREATEQ expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . GREATER expression
    (16) expression -> expression . LESS expression
    (17) expression -> expression . GREATEQ expression
    (18) expression -> expression . LESSEQ expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . OR expression

    GREATER         reduce using rule 17 (expression -> expression GREATEQ expression .)
    LESS            reduce using rule 17 (expression -> expression GREATEQ expression .)
    GREATEQ         reduce using rule 17 (expression -> expression GREATEQ expression .)
    LESSEQ          reduce using rule 17 (expression -> expression GREATEQ expression .)
    AND             reduce using rule 17 (expression -> expression GREATEQ expression .)
    OR              reduce using rule 17 (expression -> expression GREATEQ expression .)
    CONSTANT        reduce using rule 17 (expression -> expression GREATEQ expression .)
    NAME            reduce using rule 17 (expression -> expression GREATEQ expression .)
    DEF             reduce using rule 17 (expression -> expression GREATEQ expression .)
    IF              reduce using rule 17 (expression -> expression GREATEQ expression .)
    FOR             reduce using rule 17 (expression -> expression GREATEQ expression .)
    $end            reduce using rule 17 (expression -> expression GREATEQ expression .)
    END             reduce using rule 17 (expression -> expression GREATEQ expression .)
    ELSE            reduce using rule 17 (expression -> expression GREATEQ expression .)
    PARENR          reduce using rule 17 (expression -> expression GREATEQ expression .)
    DO              reduce using rule 17 (expression -> expression GREATEQ expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 30

  ! PLUS            [ reduce using rule 17 (expression -> expression GREATEQ expression .) ]
  ! MINUS           [ reduce using rule 17 (expression -> expression GREATEQ expression .) ]
  ! TIMES           [ reduce using rule 17 (expression -> expression GREATEQ expression .) ]
  ! DIVIDE          [ reduce using rule 17 (expression -> expression GREATEQ expression .) ]
  ! GREATER         [ shift and go to state 37 ]
  ! LESS            [ shift and go to state 32 ]
  ! GREATEQ         [ shift and go to state 31 ]
  ! LESSEQ          [ shift and go to state 34 ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 29 ]


state 47

    (16) expression -> expression LESS expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . GREATER expression
    (16) expression -> expression . LESS expression
    (17) expression -> expression . GREATEQ expression
    (18) expression -> expression . LESSEQ expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . OR expression

    GREATER         reduce using rule 16 (expression -> expression LESS expression .)
    LESS            reduce using rule 16 (expression -> expression LESS expression .)
    GREATEQ         reduce using rule 16 (expression -> expression LESS expression .)
    LESSEQ          reduce using rule 16 (expression -> expression LESS expression .)
    AND             reduce using rule 16 (expression -> expression LESS expression .)
    OR              reduce using rule 16 (expression -> expression LESS expression .)
    CONSTANT        reduce using rule 16 (expression -> expression LESS expression .)
    NAME            reduce using rule 16 (expression -> expression LESS expression .)
    DEF             reduce using rule 16 (expression -> expression LESS expression .)
    IF              reduce using rule 16 (expression -> expression LESS expression .)
    FOR             reduce using rule 16 (expression -> expression LESS expression .)
    $end            reduce using rule 16 (expression -> expression LESS expression .)
    END             reduce using rule 16 (expression -> expression LESS expression .)
    ELSE            reduce using rule 16 (expression -> expression LESS expression .)
    PARENR          reduce using rule 16 (expression -> expression LESS expression .)
    DO              reduce using rule 16 (expression -> expression LESS expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 30

  ! PLUS            [ reduce using rule 16 (expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 16 (expression -> expression LESS expression .) ]
  ! TIMES           [ reduce using rule 16 (expression -> expression LESS expression .) ]
  ! DIVIDE          [ reduce using rule 16 (expression -> expression LESS expression .) ]
  ! GREATER         [ shift and go to state 37 ]
  ! LESS            [ shift and go to state 32 ]
  ! GREATEQ         [ shift and go to state 31 ]
  ! LESSEQ          [ shift and go to state 34 ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 29 ]


state 48

    (13) expression -> expression TIMES expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . GREATER expression
    (16) expression -> expression . LESS expression
    (17) expression -> expression . GREATEQ expression
    (18) expression -> expression . LESSEQ expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . OR expression

    PLUS            reduce using rule 13 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 13 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 13 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 13 (expression -> expression TIMES expression .)
    GREATER         reduce using rule 13 (expression -> expression TIMES expression .)
    LESS            reduce using rule 13 (expression -> expression TIMES expression .)
    GREATEQ         reduce using rule 13 (expression -> expression TIMES expression .)
    LESSEQ          reduce using rule 13 (expression -> expression TIMES expression .)
    AND             reduce using rule 13 (expression -> expression TIMES expression .)
    OR              reduce using rule 13 (expression -> expression TIMES expression .)
    CONSTANT        reduce using rule 13 (expression -> expression TIMES expression .)
    NAME            reduce using rule 13 (expression -> expression TIMES expression .)
    DEF             reduce using rule 13 (expression -> expression TIMES expression .)
    IF              reduce using rule 13 (expression -> expression TIMES expression .)
    FOR             reduce using rule 13 (expression -> expression TIMES expression .)
    $end            reduce using rule 13 (expression -> expression TIMES expression .)
    END             reduce using rule 13 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 13 (expression -> expression TIMES expression .)
    PARENR          reduce using rule 13 (expression -> expression TIMES expression .)
    DO              reduce using rule 13 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 35 ]
  ! MINUS           [ shift and go to state 36 ]
  ! TIMES           [ shift and go to state 33 ]
  ! DIVIDE          [ shift and go to state 30 ]
  ! GREATER         [ shift and go to state 37 ]
  ! LESS            [ shift and go to state 32 ]
  ! GREATEQ         [ shift and go to state 31 ]
  ! LESSEQ          [ shift and go to state 34 ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 29 ]


state 49

    (18) expression -> expression LESSEQ expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . GREATER expression
    (16) expression -> expression . LESS expression
    (17) expression -> expression . GREATEQ expression
    (18) expression -> expression . LESSEQ expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . OR expression

    GREATER         reduce using rule 18 (expression -> expression LESSEQ expression .)
    LESS            reduce using rule 18 (expression -> expression LESSEQ expression .)
    GREATEQ         reduce using rule 18 (expression -> expression LESSEQ expression .)
    LESSEQ          reduce using rule 18 (expression -> expression LESSEQ expression .)
    AND             reduce using rule 18 (expression -> expression LESSEQ expression .)
    OR              reduce using rule 18 (expression -> expression LESSEQ expression .)
    CONSTANT        reduce using rule 18 (expression -> expression LESSEQ expression .)
    NAME            reduce using rule 18 (expression -> expression LESSEQ expression .)
    DEF             reduce using rule 18 (expression -> expression LESSEQ expression .)
    IF              reduce using rule 18 (expression -> expression LESSEQ expression .)
    FOR             reduce using rule 18 (expression -> expression LESSEQ expression .)
    $end            reduce using rule 18 (expression -> expression LESSEQ expression .)
    END             reduce using rule 18 (expression -> expression LESSEQ expression .)
    ELSE            reduce using rule 18 (expression -> expression LESSEQ expression .)
    PARENR          reduce using rule 18 (expression -> expression LESSEQ expression .)
    DO              reduce using rule 18 (expression -> expression LESSEQ expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 30

  ! PLUS            [ reduce using rule 18 (expression -> expression LESSEQ expression .) ]
  ! MINUS           [ reduce using rule 18 (expression -> expression LESSEQ expression .) ]
  ! TIMES           [ reduce using rule 18 (expression -> expression LESSEQ expression .) ]
  ! DIVIDE          [ reduce using rule 18 (expression -> expression LESSEQ expression .) ]
  ! GREATER         [ shift and go to state 37 ]
  ! LESS            [ shift and go to state 32 ]
  ! GREATEQ         [ shift and go to state 31 ]
  ! LESSEQ          [ shift and go to state 34 ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 29 ]


state 50

    (11) expression -> expression PLUS expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . GREATER expression
    (16) expression -> expression . LESS expression
    (17) expression -> expression . GREATEQ expression
    (18) expression -> expression . LESSEQ expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . OR expression

    PLUS            reduce using rule 11 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 11 (expression -> expression PLUS expression .)
    GREATER         reduce using rule 11 (expression -> expression PLUS expression .)
    LESS            reduce using rule 11 (expression -> expression PLUS expression .)
    GREATEQ         reduce using rule 11 (expression -> expression PLUS expression .)
    LESSEQ          reduce using rule 11 (expression -> expression PLUS expression .)
    AND             reduce using rule 11 (expression -> expression PLUS expression .)
    OR              reduce using rule 11 (expression -> expression PLUS expression .)
    CONSTANT        reduce using rule 11 (expression -> expression PLUS expression .)
    NAME            reduce using rule 11 (expression -> expression PLUS expression .)
    DEF             reduce using rule 11 (expression -> expression PLUS expression .)
    IF              reduce using rule 11 (expression -> expression PLUS expression .)
    FOR             reduce using rule 11 (expression -> expression PLUS expression .)
    $end            reduce using rule 11 (expression -> expression PLUS expression .)
    END             reduce using rule 11 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 11 (expression -> expression PLUS expression .)
    PARENR          reduce using rule 11 (expression -> expression PLUS expression .)
    DO              reduce using rule 11 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 30

  ! TIMES           [ reduce using rule 11 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 11 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 35 ]
  ! MINUS           [ shift and go to state 36 ]
  ! GREATER         [ shift and go to state 37 ]
  ! LESS            [ shift and go to state 32 ]
  ! GREATEQ         [ shift and go to state 31 ]
  ! LESSEQ          [ shift and go to state 34 ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 29 ]


state 51

    (12) expression -> expression MINUS expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . GREATER expression
    (16) expression -> expression . LESS expression
    (17) expression -> expression . GREATEQ expression
    (18) expression -> expression . LESSEQ expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . OR expression

    PLUS            reduce using rule 12 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 12 (expression -> expression MINUS expression .)
    GREATER         reduce using rule 12 (expression -> expression MINUS expression .)
    LESS            reduce using rule 12 (expression -> expression MINUS expression .)
    GREATEQ         reduce using rule 12 (expression -> expression MINUS expression .)
    LESSEQ          reduce using rule 12 (expression -> expression MINUS expression .)
    AND             reduce using rule 12 (expression -> expression MINUS expression .)
    OR              reduce using rule 12 (expression -> expression MINUS expression .)
    CONSTANT        reduce using rule 12 (expression -> expression MINUS expression .)
    NAME            reduce using rule 12 (expression -> expression MINUS expression .)
    DEF             reduce using rule 12 (expression -> expression MINUS expression .)
    IF              reduce using rule 12 (expression -> expression MINUS expression .)
    FOR             reduce using rule 12 (expression -> expression MINUS expression .)
    $end            reduce using rule 12 (expression -> expression MINUS expression .)
    END             reduce using rule 12 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 12 (expression -> expression MINUS expression .)
    PARENR          reduce using rule 12 (expression -> expression MINUS expression .)
    DO              reduce using rule 12 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 30

  ! TIMES           [ reduce using rule 12 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 12 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 35 ]
  ! MINUS           [ shift and go to state 36 ]
  ! GREATER         [ shift and go to state 37 ]
  ! LESS            [ shift and go to state 32 ]
  ! GREATEQ         [ shift and go to state 31 ]
  ! LESSEQ          [ shift and go to state 34 ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 29 ]


state 52

    (15) expression -> expression GREATER expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . GREATER expression
    (16) expression -> expression . LESS expression
    (17) expression -> expression . GREATEQ expression
    (18) expression -> expression . LESSEQ expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . OR expression

    GREATER         reduce using rule 15 (expression -> expression GREATER expression .)
    LESS            reduce using rule 15 (expression -> expression GREATER expression .)
    GREATEQ         reduce using rule 15 (expression -> expression GREATER expression .)
    LESSEQ          reduce using rule 15 (expression -> expression GREATER expression .)
    AND             reduce using rule 15 (expression -> expression GREATER expression .)
    OR              reduce using rule 15 (expression -> expression GREATER expression .)
    CONSTANT        reduce using rule 15 (expression -> expression GREATER expression .)
    NAME            reduce using rule 15 (expression -> expression GREATER expression .)
    DEF             reduce using rule 15 (expression -> expression GREATER expression .)
    IF              reduce using rule 15 (expression -> expression GREATER expression .)
    FOR             reduce using rule 15 (expression -> expression GREATER expression .)
    $end            reduce using rule 15 (expression -> expression GREATER expression .)
    END             reduce using rule 15 (expression -> expression GREATER expression .)
    ELSE            reduce using rule 15 (expression -> expression GREATER expression .)
    PARENR          reduce using rule 15 (expression -> expression GREATER expression .)
    DO              reduce using rule 15 (expression -> expression GREATER expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 30

  ! PLUS            [ reduce using rule 15 (expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 15 (expression -> expression GREATER expression .) ]
  ! TIMES           [ reduce using rule 15 (expression -> expression GREATER expression .) ]
  ! DIVIDE          [ reduce using rule 15 (expression -> expression GREATER expression .) ]
  ! GREATER         [ shift and go to state 37 ]
  ! LESS            [ shift and go to state 32 ]
  ! GREATEQ         [ shift and go to state 31 ]
  ! LESSEQ          [ shift and go to state 34 ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 29 ]


state 53

    (6) statement -> DEF NAME PARENL NAME . PARENR DO new_scope statements end_scope END

    PARENR          shift and go to state 59


state 54

    (7) statement -> DEF NAME PARENL empty . PARENR DO new_scope statements end_scope END

    PARENR          shift and go to state 60


state 55

    (10) statement -> FOR NAME FOREXPR NAME . DO new_scope statements end_scope END

    DO              shift and go to state 61


state 56

    (22) expression -> PARENL new_scope expression end_scope . PARENR

    PARENR          shift and go to state 62


state 57

    (32) end_scope -> empty .

    PARENR          reduce using rule 32 (end_scope -> empty .)
    END             reduce using rule 32 (end_scope -> empty .)
    DO              reduce using rule 32 (end_scope -> empty .)


state 58

    (8) statement -> IF new_scope expression end_scope . DO new_scope statements end_scope END
    (9) statement -> IF new_scope expression end_scope . DO new_scope statements ELSE new_scope statements end_scope END

    DO              shift and go to state 63


state 59

    (6) statement -> DEF NAME PARENL NAME PARENR . DO new_scope statements end_scope END

    DO              shift and go to state 64


state 60

    (7) statement -> DEF NAME PARENL empty PARENR . DO new_scope statements end_scope END

    DO              shift and go to state 65


state 61

    (10) statement -> FOR NAME FOREXPR NAME DO . new_scope statements end_scope END
    (31) new_scope -> . empty
    (30) empty -> .

    CONSTANT        reduce using rule 30 (empty -> .)
    NAME            reduce using rule 30 (empty -> .)
    DEF             reduce using rule 30 (empty -> .)
    IF              reduce using rule 30 (empty -> .)
    FOR             reduce using rule 30 (empty -> .)
    MINUS           reduce using rule 30 (empty -> .)
    PARENL          reduce using rule 30 (empty -> .)
    INT             reduce using rule 30 (empty -> .)
    DOUBLE          reduce using rule 30 (empty -> .)
    CHAR            reduce using rule 30 (empty -> .)
    TRUE            reduce using rule 30 (empty -> .)
    FALSE           reduce using rule 30 (empty -> .)
    STRING          reduce using rule 30 (empty -> .)

    new_scope                      shift and go to state 66
    empty                          shift and go to state 25

state 62

    (22) expression -> PARENL new_scope expression end_scope PARENR .

    PLUS            reduce using rule 22 (expression -> PARENL new_scope expression end_scope PARENR .)
    MINUS           reduce using rule 22 (expression -> PARENL new_scope expression end_scope PARENR .)
    TIMES           reduce using rule 22 (expression -> PARENL new_scope expression end_scope PARENR .)
    DIVIDE          reduce using rule 22 (expression -> PARENL new_scope expression end_scope PARENR .)
    GREATER         reduce using rule 22 (expression -> PARENL new_scope expression end_scope PARENR .)
    LESS            reduce using rule 22 (expression -> PARENL new_scope expression end_scope PARENR .)
    GREATEQ         reduce using rule 22 (expression -> PARENL new_scope expression end_scope PARENR .)
    LESSEQ          reduce using rule 22 (expression -> PARENL new_scope expression end_scope PARENR .)
    AND             reduce using rule 22 (expression -> PARENL new_scope expression end_scope PARENR .)
    OR              reduce using rule 22 (expression -> PARENL new_scope expression end_scope PARENR .)
    CONSTANT        reduce using rule 22 (expression -> PARENL new_scope expression end_scope PARENR .)
    NAME            reduce using rule 22 (expression -> PARENL new_scope expression end_scope PARENR .)
    DEF             reduce using rule 22 (expression -> PARENL new_scope expression end_scope PARENR .)
    IF              reduce using rule 22 (expression -> PARENL new_scope expression end_scope PARENR .)
    FOR             reduce using rule 22 (expression -> PARENL new_scope expression end_scope PARENR .)
    $end            reduce using rule 22 (expression -> PARENL new_scope expression end_scope PARENR .)
    END             reduce using rule 22 (expression -> PARENL new_scope expression end_scope PARENR .)
    ELSE            reduce using rule 22 (expression -> PARENL new_scope expression end_scope PARENR .)
    PARENR          reduce using rule 22 (expression -> PARENL new_scope expression end_scope PARENR .)
    DO              reduce using rule 22 (expression -> PARENL new_scope expression end_scope PARENR .)


state 63

    (8) statement -> IF new_scope expression end_scope DO . new_scope statements end_scope END
    (9) statement -> IF new_scope expression end_scope DO . new_scope statements ELSE new_scope statements end_scope END
    (31) new_scope -> . empty
    (30) empty -> .

    CONSTANT        reduce using rule 30 (empty -> .)
    NAME            reduce using rule 30 (empty -> .)
    DEF             reduce using rule 30 (empty -> .)
    IF              reduce using rule 30 (empty -> .)
    FOR             reduce using rule 30 (empty -> .)
    MINUS           reduce using rule 30 (empty -> .)
    PARENL          reduce using rule 30 (empty -> .)
    INT             reduce using rule 30 (empty -> .)
    DOUBLE          reduce using rule 30 (empty -> .)
    CHAR            reduce using rule 30 (empty -> .)
    TRUE            reduce using rule 30 (empty -> .)
    FALSE           reduce using rule 30 (empty -> .)
    STRING          reduce using rule 30 (empty -> .)

    new_scope                      shift and go to state 67
    empty                          shift and go to state 25

state 64

    (6) statement -> DEF NAME PARENL NAME PARENR DO . new_scope statements end_scope END
    (31) new_scope -> . empty
    (30) empty -> .

    CONSTANT        reduce using rule 30 (empty -> .)
    NAME            reduce using rule 30 (empty -> .)
    DEF             reduce using rule 30 (empty -> .)
    IF              reduce using rule 30 (empty -> .)
    FOR             reduce using rule 30 (empty -> .)
    MINUS           reduce using rule 30 (empty -> .)
    PARENL          reduce using rule 30 (empty -> .)
    INT             reduce using rule 30 (empty -> .)
    DOUBLE          reduce using rule 30 (empty -> .)
    CHAR            reduce using rule 30 (empty -> .)
    TRUE            reduce using rule 30 (empty -> .)
    FALSE           reduce using rule 30 (empty -> .)
    STRING          reduce using rule 30 (empty -> .)

    new_scope                      shift and go to state 68
    empty                          shift and go to state 25

state 65

    (7) statement -> DEF NAME PARENL empty PARENR DO . new_scope statements end_scope END
    (31) new_scope -> . empty
    (30) empty -> .

    CONSTANT        reduce using rule 30 (empty -> .)
    NAME            reduce using rule 30 (empty -> .)
    DEF             reduce using rule 30 (empty -> .)
    IF              reduce using rule 30 (empty -> .)
    FOR             reduce using rule 30 (empty -> .)
    MINUS           reduce using rule 30 (empty -> .)
    PARENL          reduce using rule 30 (empty -> .)
    INT             reduce using rule 30 (empty -> .)
    DOUBLE          reduce using rule 30 (empty -> .)
    CHAR            reduce using rule 30 (empty -> .)
    TRUE            reduce using rule 30 (empty -> .)
    FALSE           reduce using rule 30 (empty -> .)
    STRING          reduce using rule 30 (empty -> .)

    new_scope                      shift and go to state 69
    empty                          shift and go to state 25

state 66

    (10) statement -> FOR NAME FOREXPR NAME DO new_scope . statements end_scope END
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statements -> . expression
    (4) statement -> . CONSTANT expression
    (5) statement -> . NAME EQUALS expression
    (6) statement -> . DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (7) statement -> . DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
    (8) statement -> . IF new_scope expression end_scope DO new_scope statements end_scope END
    (9) statement -> . IF new_scope expression end_scope DO new_scope statements ELSE new_scope statements end_scope END
    (10) statement -> . FOR NAME FOREXPR NAME DO new_scope statements end_scope END
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression GREATER expression
    (16) expression -> . expression LESS expression
    (17) expression -> . expression GREATEQ expression
    (18) expression -> . expression LESSEQ expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression OR expression
    (21) expression -> . MINUS expression
    (22) expression -> . PARENL new_scope expression end_scope PARENR
    (23) expression -> . INT
    (24) expression -> . DOUBLE
    (25) expression -> . CHAR
    (26) expression -> . TRUE
    (27) expression -> . FALSE
    (28) expression -> . STRING
    (29) expression -> . NAME

    CONSTANT        shift and go to state 1
    NAME            shift and go to state 13
    DEF             shift and go to state 6
    IF              shift and go to state 11
    FOR             shift and go to state 9
    MINUS           shift and go to state 5
    PARENL          shift and go to state 10
    INT             shift and go to state 14
    DOUBLE          shift and go to state 15
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 12
    STRING          shift and go to state 7

    statements                     shift and go to state 70
    statement                      shift and go to state 8
    expression                     shift and go to state 16

state 67

    (8) statement -> IF new_scope expression end_scope DO new_scope . statements end_scope END
    (9) statement -> IF new_scope expression end_scope DO new_scope . statements ELSE new_scope statements end_scope END
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statements -> . expression
    (4) statement -> . CONSTANT expression
    (5) statement -> . NAME EQUALS expression
    (6) statement -> . DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (7) statement -> . DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
    (8) statement -> . IF new_scope expression end_scope DO new_scope statements end_scope END
    (9) statement -> . IF new_scope expression end_scope DO new_scope statements ELSE new_scope statements end_scope END
    (10) statement -> . FOR NAME FOREXPR NAME DO new_scope statements end_scope END
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression GREATER expression
    (16) expression -> . expression LESS expression
    (17) expression -> . expression GREATEQ expression
    (18) expression -> . expression LESSEQ expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression OR expression
    (21) expression -> . MINUS expression
    (22) expression -> . PARENL new_scope expression end_scope PARENR
    (23) expression -> . INT
    (24) expression -> . DOUBLE
    (25) expression -> . CHAR
    (26) expression -> . TRUE
    (27) expression -> . FALSE
    (28) expression -> . STRING
    (29) expression -> . NAME

    CONSTANT        shift and go to state 1
    NAME            shift and go to state 13
    DEF             shift and go to state 6
    IF              shift and go to state 11
    FOR             shift and go to state 9
    MINUS           shift and go to state 5
    PARENL          shift and go to state 10
    INT             shift and go to state 14
    DOUBLE          shift and go to state 15
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 12
    STRING          shift and go to state 7

    statements                     shift and go to state 71
    statement                      shift and go to state 8
    expression                     shift and go to state 16

state 68

    (6) statement -> DEF NAME PARENL NAME PARENR DO new_scope . statements end_scope END
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statements -> . expression
    (4) statement -> . CONSTANT expression
    (5) statement -> . NAME EQUALS expression
    (6) statement -> . DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (7) statement -> . DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
    (8) statement -> . IF new_scope expression end_scope DO new_scope statements end_scope END
    (9) statement -> . IF new_scope expression end_scope DO new_scope statements ELSE new_scope statements end_scope END
    (10) statement -> . FOR NAME FOREXPR NAME DO new_scope statements end_scope END
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression GREATER expression
    (16) expression -> . expression LESS expression
    (17) expression -> . expression GREATEQ expression
    (18) expression -> . expression LESSEQ expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression OR expression
    (21) expression -> . MINUS expression
    (22) expression -> . PARENL new_scope expression end_scope PARENR
    (23) expression -> . INT
    (24) expression -> . DOUBLE
    (25) expression -> . CHAR
    (26) expression -> . TRUE
    (27) expression -> . FALSE
    (28) expression -> . STRING
    (29) expression -> . NAME

    CONSTANT        shift and go to state 1
    NAME            shift and go to state 13
    DEF             shift and go to state 6
    IF              shift and go to state 11
    FOR             shift and go to state 9
    MINUS           shift and go to state 5
    PARENL          shift and go to state 10
    INT             shift and go to state 14
    DOUBLE          shift and go to state 15
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 12
    STRING          shift and go to state 7

    statements                     shift and go to state 72
    statement                      shift and go to state 8
    expression                     shift and go to state 16

state 69

    (7) statement -> DEF NAME PARENL empty PARENR DO new_scope . statements end_scope END
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statements -> . expression
    (4) statement -> . CONSTANT expression
    (5) statement -> . NAME EQUALS expression
    (6) statement -> . DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (7) statement -> . DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
    (8) statement -> . IF new_scope expression end_scope DO new_scope statements end_scope END
    (9) statement -> . IF new_scope expression end_scope DO new_scope statements ELSE new_scope statements end_scope END
    (10) statement -> . FOR NAME FOREXPR NAME DO new_scope statements end_scope END
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression GREATER expression
    (16) expression -> . expression LESS expression
    (17) expression -> . expression GREATEQ expression
    (18) expression -> . expression LESSEQ expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression OR expression
    (21) expression -> . MINUS expression
    (22) expression -> . PARENL new_scope expression end_scope PARENR
    (23) expression -> . INT
    (24) expression -> . DOUBLE
    (25) expression -> . CHAR
    (26) expression -> . TRUE
    (27) expression -> . FALSE
    (28) expression -> . STRING
    (29) expression -> . NAME

    CONSTANT        shift and go to state 1
    NAME            shift and go to state 13
    DEF             shift and go to state 6
    IF              shift and go to state 11
    FOR             shift and go to state 9
    MINUS           shift and go to state 5
    PARENL          shift and go to state 10
    INT             shift and go to state 14
    DOUBLE          shift and go to state 15
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 12
    STRING          shift and go to state 7

    statements                     shift and go to state 73
    statement                      shift and go to state 8
    expression                     shift and go to state 16

state 70

    (10) statement -> FOR NAME FOREXPR NAME DO new_scope statements . end_scope END
    (1) statements -> statements . statement
    (32) end_scope -> . empty
    (4) statement -> . CONSTANT expression
    (5) statement -> . NAME EQUALS expression
    (6) statement -> . DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (7) statement -> . DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
    (8) statement -> . IF new_scope expression end_scope DO new_scope statements end_scope END
    (9) statement -> . IF new_scope expression end_scope DO new_scope statements ELSE new_scope statements end_scope END
    (10) statement -> . FOR NAME FOREXPR NAME DO new_scope statements end_scope END
    (30) empty -> .

    CONSTANT        shift and go to state 1
    NAME            shift and go to state 19
    DEF             shift and go to state 6
    IF              shift and go to state 11
    FOR             shift and go to state 9
    END             reduce using rule 30 (empty -> .)

    end_scope                      shift and go to state 74
    statement                      shift and go to state 20
    empty                          shift and go to state 57

state 71

    (8) statement -> IF new_scope expression end_scope DO new_scope statements . end_scope END
    (9) statement -> IF new_scope expression end_scope DO new_scope statements . ELSE new_scope statements end_scope END
    (1) statements -> statements . statement
    (32) end_scope -> . empty
    (4) statement -> . CONSTANT expression
    (5) statement -> . NAME EQUALS expression
    (6) statement -> . DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (7) statement -> . DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
    (8) statement -> . IF new_scope expression end_scope DO new_scope statements end_scope END
    (9) statement -> . IF new_scope expression end_scope DO new_scope statements ELSE new_scope statements end_scope END
    (10) statement -> . FOR NAME FOREXPR NAME DO new_scope statements end_scope END
    (30) empty -> .

    ELSE            shift and go to state 76
    CONSTANT        shift and go to state 1
    NAME            shift and go to state 19
    DEF             shift and go to state 6
    IF              shift and go to state 11
    FOR             shift and go to state 9
    END             reduce using rule 30 (empty -> .)

    end_scope                      shift and go to state 75
    statement                      shift and go to state 20
    empty                          shift and go to state 57

state 72

    (6) statement -> DEF NAME PARENL NAME PARENR DO new_scope statements . end_scope END
    (1) statements -> statements . statement
    (32) end_scope -> . empty
    (4) statement -> . CONSTANT expression
    (5) statement -> . NAME EQUALS expression
    (6) statement -> . DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (7) statement -> . DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
    (8) statement -> . IF new_scope expression end_scope DO new_scope statements end_scope END
    (9) statement -> . IF new_scope expression end_scope DO new_scope statements ELSE new_scope statements end_scope END
    (10) statement -> . FOR NAME FOREXPR NAME DO new_scope statements end_scope END
    (30) empty -> .

    CONSTANT        shift and go to state 1
    NAME            shift and go to state 19
    DEF             shift and go to state 6
    IF              shift and go to state 11
    FOR             shift and go to state 9
    END             reduce using rule 30 (empty -> .)

    end_scope                      shift and go to state 77
    statement                      shift and go to state 20
    empty                          shift and go to state 57

state 73

    (7) statement -> DEF NAME PARENL empty PARENR DO new_scope statements . end_scope END
    (1) statements -> statements . statement
    (32) end_scope -> . empty
    (4) statement -> . CONSTANT expression
    (5) statement -> . NAME EQUALS expression
    (6) statement -> . DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (7) statement -> . DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
    (8) statement -> . IF new_scope expression end_scope DO new_scope statements end_scope END
    (9) statement -> . IF new_scope expression end_scope DO new_scope statements ELSE new_scope statements end_scope END
    (10) statement -> . FOR NAME FOREXPR NAME DO new_scope statements end_scope END
    (30) empty -> .

    CONSTANT        shift and go to state 1
    NAME            shift and go to state 19
    DEF             shift and go to state 6
    IF              shift and go to state 11
    FOR             shift and go to state 9
    END             reduce using rule 30 (empty -> .)

    end_scope                      shift and go to state 78
    statement                      shift and go to state 20
    empty                          shift and go to state 57

state 74

    (10) statement -> FOR NAME FOREXPR NAME DO new_scope statements end_scope . END

    END             shift and go to state 79


state 75

    (8) statement -> IF new_scope expression end_scope DO new_scope statements end_scope . END

    END             shift and go to state 80


state 76

    (9) statement -> IF new_scope expression end_scope DO new_scope statements ELSE . new_scope statements end_scope END
    (31) new_scope -> . empty
    (30) empty -> .

    CONSTANT        reduce using rule 30 (empty -> .)
    NAME            reduce using rule 30 (empty -> .)
    DEF             reduce using rule 30 (empty -> .)
    IF              reduce using rule 30 (empty -> .)
    FOR             reduce using rule 30 (empty -> .)
    MINUS           reduce using rule 30 (empty -> .)
    PARENL          reduce using rule 30 (empty -> .)
    INT             reduce using rule 30 (empty -> .)
    DOUBLE          reduce using rule 30 (empty -> .)
    CHAR            reduce using rule 30 (empty -> .)
    TRUE            reduce using rule 30 (empty -> .)
    FALSE           reduce using rule 30 (empty -> .)
    STRING          reduce using rule 30 (empty -> .)

    new_scope                      shift and go to state 81
    empty                          shift and go to state 25

state 77

    (6) statement -> DEF NAME PARENL NAME PARENR DO new_scope statements end_scope . END

    END             shift and go to state 82


state 78

    (7) statement -> DEF NAME PARENL empty PARENR DO new_scope statements end_scope . END

    END             shift and go to state 83


state 79

    (10) statement -> FOR NAME FOREXPR NAME DO new_scope statements end_scope END .

    ELSE            reduce using rule 10 (statement -> FOR NAME FOREXPR NAME DO new_scope statements end_scope END .)
    CONSTANT        reduce using rule 10 (statement -> FOR NAME FOREXPR NAME DO new_scope statements end_scope END .)
    NAME            reduce using rule 10 (statement -> FOR NAME FOREXPR NAME DO new_scope statements end_scope END .)
    DEF             reduce using rule 10 (statement -> FOR NAME FOREXPR NAME DO new_scope statements end_scope END .)
    IF              reduce using rule 10 (statement -> FOR NAME FOREXPR NAME DO new_scope statements end_scope END .)
    FOR             reduce using rule 10 (statement -> FOR NAME FOREXPR NAME DO new_scope statements end_scope END .)
    END             reduce using rule 10 (statement -> FOR NAME FOREXPR NAME DO new_scope statements end_scope END .)
    $end            reduce using rule 10 (statement -> FOR NAME FOREXPR NAME DO new_scope statements end_scope END .)


state 80

    (8) statement -> IF new_scope expression end_scope DO new_scope statements end_scope END .

    ELSE            reduce using rule 8 (statement -> IF new_scope expression end_scope DO new_scope statements end_scope END .)
    CONSTANT        reduce using rule 8 (statement -> IF new_scope expression end_scope DO new_scope statements end_scope END .)
    NAME            reduce using rule 8 (statement -> IF new_scope expression end_scope DO new_scope statements end_scope END .)
    DEF             reduce using rule 8 (statement -> IF new_scope expression end_scope DO new_scope statements end_scope END .)
    IF              reduce using rule 8 (statement -> IF new_scope expression end_scope DO new_scope statements end_scope END .)
    FOR             reduce using rule 8 (statement -> IF new_scope expression end_scope DO new_scope statements end_scope END .)
    END             reduce using rule 8 (statement -> IF new_scope expression end_scope DO new_scope statements end_scope END .)
    $end            reduce using rule 8 (statement -> IF new_scope expression end_scope DO new_scope statements end_scope END .)


state 81

    (9) statement -> IF new_scope expression end_scope DO new_scope statements ELSE new_scope . statements end_scope END
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statements -> . expression
    (4) statement -> . CONSTANT expression
    (5) statement -> . NAME EQUALS expression
    (6) statement -> . DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (7) statement -> . DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
    (8) statement -> . IF new_scope expression end_scope DO new_scope statements end_scope END
    (9) statement -> . IF new_scope expression end_scope DO new_scope statements ELSE new_scope statements end_scope END
    (10) statement -> . FOR NAME FOREXPR NAME DO new_scope statements end_scope END
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression GREATER expression
    (16) expression -> . expression LESS expression
    (17) expression -> . expression GREATEQ expression
    (18) expression -> . expression LESSEQ expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression OR expression
    (21) expression -> . MINUS expression
    (22) expression -> . PARENL new_scope expression end_scope PARENR
    (23) expression -> . INT
    (24) expression -> . DOUBLE
    (25) expression -> . CHAR
    (26) expression -> . TRUE
    (27) expression -> . FALSE
    (28) expression -> . STRING
    (29) expression -> . NAME

    CONSTANT        shift and go to state 1
    NAME            shift and go to state 13
    DEF             shift and go to state 6
    IF              shift and go to state 11
    FOR             shift and go to state 9
    MINUS           shift and go to state 5
    PARENL          shift and go to state 10
    INT             shift and go to state 14
    DOUBLE          shift and go to state 15
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 12
    STRING          shift and go to state 7

    statements                     shift and go to state 84
    statement                      shift and go to state 8
    expression                     shift and go to state 16

state 82

    (6) statement -> DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END .

    ELSE            reduce using rule 6 (statement -> DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END .)
    CONSTANT        reduce using rule 6 (statement -> DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END .)
    NAME            reduce using rule 6 (statement -> DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END .)
    DEF             reduce using rule 6 (statement -> DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END .)
    IF              reduce using rule 6 (statement -> DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END .)
    FOR             reduce using rule 6 (statement -> DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END .)
    END             reduce using rule 6 (statement -> DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END .)
    $end            reduce using rule 6 (statement -> DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END .)


state 83

    (7) statement -> DEF NAME PARENL empty PARENR DO new_scope statements end_scope END .

    ELSE            reduce using rule 7 (statement -> DEF NAME PARENL empty PARENR DO new_scope statements end_scope END .)
    CONSTANT        reduce using rule 7 (statement -> DEF NAME PARENL empty PARENR DO new_scope statements end_scope END .)
    NAME            reduce using rule 7 (statement -> DEF NAME PARENL empty PARENR DO new_scope statements end_scope END .)
    DEF             reduce using rule 7 (statement -> DEF NAME PARENL empty PARENR DO new_scope statements end_scope END .)
    IF              reduce using rule 7 (statement -> DEF NAME PARENL empty PARENR DO new_scope statements end_scope END .)
    FOR             reduce using rule 7 (statement -> DEF NAME PARENL empty PARENR DO new_scope statements end_scope END .)
    END             reduce using rule 7 (statement -> DEF NAME PARENL empty PARENR DO new_scope statements end_scope END .)
    $end            reduce using rule 7 (statement -> DEF NAME PARENL empty PARENR DO new_scope statements end_scope END .)


state 84

    (9) statement -> IF new_scope expression end_scope DO new_scope statements ELSE new_scope statements . end_scope END
    (1) statements -> statements . statement
    (32) end_scope -> . empty
    (4) statement -> . CONSTANT expression
    (5) statement -> . NAME EQUALS expression
    (6) statement -> . DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (7) statement -> . DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
    (8) statement -> . IF new_scope expression end_scope DO new_scope statements end_scope END
    (9) statement -> . IF new_scope expression end_scope DO new_scope statements ELSE new_scope statements end_scope END
    (10) statement -> . FOR NAME FOREXPR NAME DO new_scope statements end_scope END
    (30) empty -> .

    CONSTANT        shift and go to state 1
    NAME            shift and go to state 19
    DEF             shift and go to state 6
    IF              shift and go to state 11
    FOR             shift and go to state 9
    END             reduce using rule 30 (empty -> .)

    end_scope                      shift and go to state 85
    statement                      shift and go to state 20
    empty                          shift and go to state 57

state 85

    (9) statement -> IF new_scope expression end_scope DO new_scope statements ELSE new_scope statements end_scope . END

    END             shift and go to state 86


state 86

    (9) statement -> IF new_scope expression end_scope DO new_scope statements ELSE new_scope statements end_scope END .

    ELSE            reduce using rule 9 (statement -> IF new_scope expression end_scope DO new_scope statements ELSE new_scope statements end_scope END .)
    CONSTANT        reduce using rule 9 (statement -> IF new_scope expression end_scope DO new_scope statements ELSE new_scope statements end_scope END .)
    NAME            reduce using rule 9 (statement -> IF new_scope expression end_scope DO new_scope statements ELSE new_scope statements end_scope END .)
    DEF             reduce using rule 9 (statement -> IF new_scope expression end_scope DO new_scope statements ELSE new_scope statements end_scope END .)
    IF              reduce using rule 9 (statement -> IF new_scope expression end_scope DO new_scope statements ELSE new_scope statements end_scope END .)
    FOR             reduce using rule 9 (statement -> IF new_scope expression end_scope DO new_scope statements ELSE new_scope statements end_scope END .)
    END             reduce using rule 9 (statement -> IF new_scope expression end_scope DO new_scope statements ELSE new_scope statements end_scope END .)
    $end            reduce using rule 9 (statement -> IF new_scope expression end_scope DO new_scope statements ELSE new_scope statements end_scope END .)

