Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statements statement
Rule 2     statements -> statement
Rule 3     statements -> expression
Rule 4     statement -> CONSTANT expression
Rule 5     statement -> NAME EQUALS expression
Rule 6     statement -> NAME EQUALS expression PARENL expression PARENR
Rule 7     statement -> DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
Rule 8     statement -> DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
Rule 9     statement -> DEF NAME DO new_scope statements end_scope END
Rule 10    statement -> new_scope if_statement end_scope
Rule 11    if_statement -> IF expression DO statements END
Rule 12    if_statement -> IF expression DO statements ELSE statements END
Rule 13    statement -> FOR NAME FOREXPR NAME DO new_scope statements end_scope END
Rule 14    expression -> expression PLUS expression
Rule 15    expression -> expression MINUS expression
Rule 16    expression -> expression TIMES expression
Rule 17    expression -> expression DIVIDE expression
Rule 18    expression -> expression GREATER expression
Rule 19    expression -> expression LESS expression
Rule 20    expression -> expression GREATEQ expression
Rule 21    expression -> expression LESSEQ expression
Rule 22    expression -> expression AND expression
Rule 23    expression -> expression OR expression
Rule 24    expression -> MINUS expression
Rule 25    expression -> PARENL new_scope expression end_scope PARENR
Rule 26    expression -> INT
Rule 27    expression -> DOUBLE
Rule 28    expression -> CHAR
Rule 29    expression -> TRUE
Rule 30    expression -> FALSE
Rule 31    expression -> STRING
Rule 32    expression -> NAME
Rule 33    empty -> <empty>
Rule 34    new_scope -> empty
Rule 35    end_scope -> empty

Terminals, with rules where they appear

AND                  : 22
CHAR                 : 28
CONSTANT             : 4
DEF                  : 7 8 9
DIVIDE               : 17
DO                   : 7 8 9 11 12 13
DOUBLE               : 27
ELSE                 : 12
END                  : 7 8 9 11 12 13
EQUALS               : 5 6
FALSE                : 30
FOR                  : 13
FOREXPR              : 13
GREATEQ              : 20
GREATER              : 18
IF                   : 11 12
INT                  : 26
LESS                 : 19
LESSEQ               : 21
MINUS                : 15 24
NAME                 : 5 6 7 7 8 9 13 13 32
OR                   : 23
PARENL               : 6 7 8 25
PARENR               : 6 7 8 25
PLUS                 : 14
STRING               : 31
TIMES                : 16
TRUE                 : 29
error                : 

Nonterminals, with rules where they appear

empty                : 8 34 35
end_scope            : 7 8 9 10 13 25
expression           : 3 4 5 6 6 11 12 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 25
if_statement         : 10
new_scope            : 7 8 9 10 13 25
statement            : 1 2
statements           : 1 7 8 9 11 12 12 13 0

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statements -> . expression
    (4) statement -> . CONSTANT expression
    (5) statement -> . NAME EQUALS expression
    (6) statement -> . NAME EQUALS expression PARENL expression PARENR
    (7) statement -> . DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (8) statement -> . DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
    (9) statement -> . DEF NAME DO new_scope statements end_scope END
    (10) statement -> . new_scope if_statement end_scope
    (13) statement -> . FOR NAME FOREXPR NAME DO new_scope statements end_scope END
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression GREATER expression
    (19) expression -> . expression LESS expression
    (20) expression -> . expression GREATEQ expression
    (21) expression -> . expression LESSEQ expression
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . MINUS expression
    (25) expression -> . PARENL new_scope expression end_scope PARENR
    (26) expression -> . INT
    (27) expression -> . DOUBLE
    (28) expression -> . CHAR
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . STRING
    (32) expression -> . NAME
    (34) new_scope -> . empty
    (33) empty -> .

    CONSTANT        shift and go to state 1
    NAME            shift and go to state 14
    DEF             shift and go to state 6
    FOR             shift and go to state 11
    MINUS           shift and go to state 5
    PARENL          shift and go to state 12
    INT             shift and go to state 15
    DOUBLE          shift and go to state 16
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    STRING          shift and go to state 7
    IF              reduce using rule 33 (empty -> .)

    statements                     shift and go to state 3
    new_scope                      shift and go to state 8
    statement                      shift and go to state 9
    expression                     shift and go to state 17
    empty                          shift and go to state 10

state 1

    (4) statement -> CONSTANT . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression GREATER expression
    (19) expression -> . expression LESS expression
    (20) expression -> . expression GREATEQ expression
    (21) expression -> . expression LESSEQ expression
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . MINUS expression
    (25) expression -> . PARENL new_scope expression end_scope PARENR
    (26) expression -> . INT
    (27) expression -> . DOUBLE
    (28) expression -> . CHAR
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . STRING
    (32) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 12
    INT             shift and go to state 15
    DOUBLE          shift and go to state 16
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    STRING          shift and go to state 7
    NAME            shift and go to state 18

    expression                     shift and go to state 19

state 2

    (28) expression -> CHAR .

    PLUS            reduce using rule 28 (expression -> CHAR .)
    MINUS           reduce using rule 28 (expression -> CHAR .)
    TIMES           reduce using rule 28 (expression -> CHAR .)
    DIVIDE          reduce using rule 28 (expression -> CHAR .)
    GREATER         reduce using rule 28 (expression -> CHAR .)
    LESS            reduce using rule 28 (expression -> CHAR .)
    GREATEQ         reduce using rule 28 (expression -> CHAR .)
    LESSEQ          reduce using rule 28 (expression -> CHAR .)
    AND             reduce using rule 28 (expression -> CHAR .)
    OR              reduce using rule 28 (expression -> CHAR .)
    CONSTANT        reduce using rule 28 (expression -> CHAR .)
    NAME            reduce using rule 28 (expression -> CHAR .)
    DEF             reduce using rule 28 (expression -> CHAR .)
    FOR             reduce using rule 28 (expression -> CHAR .)
    $end            reduce using rule 28 (expression -> CHAR .)
    IF              reduce using rule 28 (expression -> CHAR .)
    END             reduce using rule 28 (expression -> CHAR .)
    ELSE            reduce using rule 28 (expression -> CHAR .)
    DO              reduce using rule 28 (expression -> CHAR .)
    PARENR          reduce using rule 28 (expression -> CHAR .)
    PARENL          reduce using rule 28 (expression -> CHAR .)


state 3

    (0) S' -> statements .
    (1) statements -> statements . statement
    (4) statement -> . CONSTANT expression
    (5) statement -> . NAME EQUALS expression
    (6) statement -> . NAME EQUALS expression PARENL expression PARENR
    (7) statement -> . DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (8) statement -> . DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
    (9) statement -> . DEF NAME DO new_scope statements end_scope END
    (10) statement -> . new_scope if_statement end_scope
    (13) statement -> . FOR NAME FOREXPR NAME DO new_scope statements end_scope END
    (34) new_scope -> . empty
    (33) empty -> .

    CONSTANT        shift and go to state 1
    NAME            shift and go to state 20
    DEF             shift and go to state 6
    FOR             shift and go to state 11
    IF              reduce using rule 33 (empty -> .)

    new_scope                      shift and go to state 8
    statement                      shift and go to state 21
    empty                          shift and go to state 10

state 4

    (29) expression -> TRUE .

    PLUS            reduce using rule 29 (expression -> TRUE .)
    MINUS           reduce using rule 29 (expression -> TRUE .)
    TIMES           reduce using rule 29 (expression -> TRUE .)
    DIVIDE          reduce using rule 29 (expression -> TRUE .)
    GREATER         reduce using rule 29 (expression -> TRUE .)
    LESS            reduce using rule 29 (expression -> TRUE .)
    GREATEQ         reduce using rule 29 (expression -> TRUE .)
    LESSEQ          reduce using rule 29 (expression -> TRUE .)
    AND             reduce using rule 29 (expression -> TRUE .)
    OR              reduce using rule 29 (expression -> TRUE .)
    CONSTANT        reduce using rule 29 (expression -> TRUE .)
    NAME            reduce using rule 29 (expression -> TRUE .)
    DEF             reduce using rule 29 (expression -> TRUE .)
    FOR             reduce using rule 29 (expression -> TRUE .)
    $end            reduce using rule 29 (expression -> TRUE .)
    IF              reduce using rule 29 (expression -> TRUE .)
    END             reduce using rule 29 (expression -> TRUE .)
    ELSE            reduce using rule 29 (expression -> TRUE .)
    DO              reduce using rule 29 (expression -> TRUE .)
    PARENR          reduce using rule 29 (expression -> TRUE .)
    PARENL          reduce using rule 29 (expression -> TRUE .)


state 5

    (24) expression -> MINUS . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression GREATER expression
    (19) expression -> . expression LESS expression
    (20) expression -> . expression GREATEQ expression
    (21) expression -> . expression LESSEQ expression
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . MINUS expression
    (25) expression -> . PARENL new_scope expression end_scope PARENR
    (26) expression -> . INT
    (27) expression -> . DOUBLE
    (28) expression -> . CHAR
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . STRING
    (32) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 12
    INT             shift and go to state 15
    DOUBLE          shift and go to state 16
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    STRING          shift and go to state 7
    NAME            shift and go to state 18

    expression                     shift and go to state 22

state 6

    (7) statement -> DEF . NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (8) statement -> DEF . NAME PARENL empty PARENR DO new_scope statements end_scope END
    (9) statement -> DEF . NAME DO new_scope statements end_scope END

    NAME            shift and go to state 23


state 7

    (31) expression -> STRING .

    PLUS            reduce using rule 31 (expression -> STRING .)
    MINUS           reduce using rule 31 (expression -> STRING .)
    TIMES           reduce using rule 31 (expression -> STRING .)
    DIVIDE          reduce using rule 31 (expression -> STRING .)
    GREATER         reduce using rule 31 (expression -> STRING .)
    LESS            reduce using rule 31 (expression -> STRING .)
    GREATEQ         reduce using rule 31 (expression -> STRING .)
    LESSEQ          reduce using rule 31 (expression -> STRING .)
    AND             reduce using rule 31 (expression -> STRING .)
    OR              reduce using rule 31 (expression -> STRING .)
    CONSTANT        reduce using rule 31 (expression -> STRING .)
    NAME            reduce using rule 31 (expression -> STRING .)
    DEF             reduce using rule 31 (expression -> STRING .)
    FOR             reduce using rule 31 (expression -> STRING .)
    $end            reduce using rule 31 (expression -> STRING .)
    IF              reduce using rule 31 (expression -> STRING .)
    END             reduce using rule 31 (expression -> STRING .)
    ELSE            reduce using rule 31 (expression -> STRING .)
    DO              reduce using rule 31 (expression -> STRING .)
    PARENR          reduce using rule 31 (expression -> STRING .)
    PARENL          reduce using rule 31 (expression -> STRING .)


state 8

    (10) statement -> new_scope . if_statement end_scope
    (11) if_statement -> . IF expression DO statements END
    (12) if_statement -> . IF expression DO statements ELSE statements END

    IF              shift and go to state 25

    if_statement                   shift and go to state 24

state 9

    (2) statements -> statement .

    CONSTANT        reduce using rule 2 (statements -> statement .)
    NAME            reduce using rule 2 (statements -> statement .)
    DEF             reduce using rule 2 (statements -> statement .)
    FOR             reduce using rule 2 (statements -> statement .)
    END             reduce using rule 2 (statements -> statement .)
    IF              reduce using rule 2 (statements -> statement .)
    $end            reduce using rule 2 (statements -> statement .)
    ELSE            reduce using rule 2 (statements -> statement .)


state 10

    (34) new_scope -> empty .

    IF              reduce using rule 34 (new_scope -> empty .)
    CONSTANT        reduce using rule 34 (new_scope -> empty .)
    NAME            reduce using rule 34 (new_scope -> empty .)
    DEF             reduce using rule 34 (new_scope -> empty .)
    FOR             reduce using rule 34 (new_scope -> empty .)
    MINUS           reduce using rule 34 (new_scope -> empty .)
    PARENL          reduce using rule 34 (new_scope -> empty .)
    INT             reduce using rule 34 (new_scope -> empty .)
    DOUBLE          reduce using rule 34 (new_scope -> empty .)
    CHAR            reduce using rule 34 (new_scope -> empty .)
    TRUE            reduce using rule 34 (new_scope -> empty .)
    FALSE           reduce using rule 34 (new_scope -> empty .)
    STRING          reduce using rule 34 (new_scope -> empty .)


state 11

    (13) statement -> FOR . NAME FOREXPR NAME DO new_scope statements end_scope END

    NAME            shift and go to state 26


state 12

    (25) expression -> PARENL . new_scope expression end_scope PARENR
    (34) new_scope -> . empty
    (33) empty -> .

    MINUS           reduce using rule 33 (empty -> .)
    PARENL          reduce using rule 33 (empty -> .)
    INT             reduce using rule 33 (empty -> .)
    DOUBLE          reduce using rule 33 (empty -> .)
    CHAR            reduce using rule 33 (empty -> .)
    TRUE            reduce using rule 33 (empty -> .)
    FALSE           reduce using rule 33 (empty -> .)
    STRING          reduce using rule 33 (empty -> .)
    NAME            reduce using rule 33 (empty -> .)

    new_scope                      shift and go to state 27
    empty                          shift and go to state 10

state 13

    (30) expression -> FALSE .

    PLUS            reduce using rule 30 (expression -> FALSE .)
    MINUS           reduce using rule 30 (expression -> FALSE .)
    TIMES           reduce using rule 30 (expression -> FALSE .)
    DIVIDE          reduce using rule 30 (expression -> FALSE .)
    GREATER         reduce using rule 30 (expression -> FALSE .)
    LESS            reduce using rule 30 (expression -> FALSE .)
    GREATEQ         reduce using rule 30 (expression -> FALSE .)
    LESSEQ          reduce using rule 30 (expression -> FALSE .)
    AND             reduce using rule 30 (expression -> FALSE .)
    OR              reduce using rule 30 (expression -> FALSE .)
    CONSTANT        reduce using rule 30 (expression -> FALSE .)
    NAME            reduce using rule 30 (expression -> FALSE .)
    DEF             reduce using rule 30 (expression -> FALSE .)
    FOR             reduce using rule 30 (expression -> FALSE .)
    $end            reduce using rule 30 (expression -> FALSE .)
    IF              reduce using rule 30 (expression -> FALSE .)
    END             reduce using rule 30 (expression -> FALSE .)
    ELSE            reduce using rule 30 (expression -> FALSE .)
    DO              reduce using rule 30 (expression -> FALSE .)
    PARENR          reduce using rule 30 (expression -> FALSE .)
    PARENL          reduce using rule 30 (expression -> FALSE .)


state 14

    (5) statement -> NAME . EQUALS expression
    (6) statement -> NAME . EQUALS expression PARENL expression PARENR
    (32) expression -> NAME .

    EQUALS          shift and go to state 28
    PLUS            reduce using rule 32 (expression -> NAME .)
    MINUS           reduce using rule 32 (expression -> NAME .)
    TIMES           reduce using rule 32 (expression -> NAME .)
    DIVIDE          reduce using rule 32 (expression -> NAME .)
    GREATER         reduce using rule 32 (expression -> NAME .)
    LESS            reduce using rule 32 (expression -> NAME .)
    GREATEQ         reduce using rule 32 (expression -> NAME .)
    LESSEQ          reduce using rule 32 (expression -> NAME .)
    AND             reduce using rule 32 (expression -> NAME .)
    OR              reduce using rule 32 (expression -> NAME .)
    CONSTANT        reduce using rule 32 (expression -> NAME .)
    NAME            reduce using rule 32 (expression -> NAME .)
    DEF             reduce using rule 32 (expression -> NAME .)
    FOR             reduce using rule 32 (expression -> NAME .)
    END             reduce using rule 32 (expression -> NAME .)
    IF              reduce using rule 32 (expression -> NAME .)
    $end            reduce using rule 32 (expression -> NAME .)
    ELSE            reduce using rule 32 (expression -> NAME .)


state 15

    (26) expression -> INT .

    PLUS            reduce using rule 26 (expression -> INT .)
    MINUS           reduce using rule 26 (expression -> INT .)
    TIMES           reduce using rule 26 (expression -> INT .)
    DIVIDE          reduce using rule 26 (expression -> INT .)
    GREATER         reduce using rule 26 (expression -> INT .)
    LESS            reduce using rule 26 (expression -> INT .)
    GREATEQ         reduce using rule 26 (expression -> INT .)
    LESSEQ          reduce using rule 26 (expression -> INT .)
    AND             reduce using rule 26 (expression -> INT .)
    OR              reduce using rule 26 (expression -> INT .)
    CONSTANT        reduce using rule 26 (expression -> INT .)
    NAME            reduce using rule 26 (expression -> INT .)
    DEF             reduce using rule 26 (expression -> INT .)
    FOR             reduce using rule 26 (expression -> INT .)
    $end            reduce using rule 26 (expression -> INT .)
    IF              reduce using rule 26 (expression -> INT .)
    END             reduce using rule 26 (expression -> INT .)
    ELSE            reduce using rule 26 (expression -> INT .)
    DO              reduce using rule 26 (expression -> INT .)
    PARENR          reduce using rule 26 (expression -> INT .)
    PARENL          reduce using rule 26 (expression -> INT .)


state 16

    (27) expression -> DOUBLE .

    PLUS            reduce using rule 27 (expression -> DOUBLE .)
    MINUS           reduce using rule 27 (expression -> DOUBLE .)
    TIMES           reduce using rule 27 (expression -> DOUBLE .)
    DIVIDE          reduce using rule 27 (expression -> DOUBLE .)
    GREATER         reduce using rule 27 (expression -> DOUBLE .)
    LESS            reduce using rule 27 (expression -> DOUBLE .)
    GREATEQ         reduce using rule 27 (expression -> DOUBLE .)
    LESSEQ          reduce using rule 27 (expression -> DOUBLE .)
    AND             reduce using rule 27 (expression -> DOUBLE .)
    OR              reduce using rule 27 (expression -> DOUBLE .)
    CONSTANT        reduce using rule 27 (expression -> DOUBLE .)
    NAME            reduce using rule 27 (expression -> DOUBLE .)
    DEF             reduce using rule 27 (expression -> DOUBLE .)
    FOR             reduce using rule 27 (expression -> DOUBLE .)
    $end            reduce using rule 27 (expression -> DOUBLE .)
    IF              reduce using rule 27 (expression -> DOUBLE .)
    END             reduce using rule 27 (expression -> DOUBLE .)
    ELSE            reduce using rule 27 (expression -> DOUBLE .)
    DO              reduce using rule 27 (expression -> DOUBLE .)
    PARENR          reduce using rule 27 (expression -> DOUBLE .)
    PARENL          reduce using rule 27 (expression -> DOUBLE .)


state 17

    (3) statements -> expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . GREATER expression
    (19) expression -> expression . LESS expression
    (20) expression -> expression . GREATEQ expression
    (21) expression -> expression . LESSEQ expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression

    CONSTANT        reduce using rule 3 (statements -> expression .)
    NAME            reduce using rule 3 (statements -> expression .)
    DEF             reduce using rule 3 (statements -> expression .)
    FOR             reduce using rule 3 (statements -> expression .)
    END             reduce using rule 3 (statements -> expression .)
    IF              reduce using rule 3 (statements -> expression .)
    $end            reduce using rule 3 (statements -> expression .)
    ELSE            reduce using rule 3 (statements -> expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 31
    GREATER         shift and go to state 38
    LESS            shift and go to state 33
    GREATEQ         shift and go to state 32
    LESSEQ          shift and go to state 35
    AND             shift and go to state 29
    OR              shift and go to state 30


state 18

    (32) expression -> NAME .

    PLUS            reduce using rule 32 (expression -> NAME .)
    MINUS           reduce using rule 32 (expression -> NAME .)
    TIMES           reduce using rule 32 (expression -> NAME .)
    DIVIDE          reduce using rule 32 (expression -> NAME .)
    GREATER         reduce using rule 32 (expression -> NAME .)
    LESS            reduce using rule 32 (expression -> NAME .)
    GREATEQ         reduce using rule 32 (expression -> NAME .)
    LESSEQ          reduce using rule 32 (expression -> NAME .)
    AND             reduce using rule 32 (expression -> NAME .)
    OR              reduce using rule 32 (expression -> NAME .)
    CONSTANT        reduce using rule 32 (expression -> NAME .)
    NAME            reduce using rule 32 (expression -> NAME .)
    DEF             reduce using rule 32 (expression -> NAME .)
    FOR             reduce using rule 32 (expression -> NAME .)
    $end            reduce using rule 32 (expression -> NAME .)
    IF              reduce using rule 32 (expression -> NAME .)
    END             reduce using rule 32 (expression -> NAME .)
    ELSE            reduce using rule 32 (expression -> NAME .)
    DO              reduce using rule 32 (expression -> NAME .)
    PARENR          reduce using rule 32 (expression -> NAME .)
    PARENL          reduce using rule 32 (expression -> NAME .)


state 19

    (4) statement -> CONSTANT expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . GREATER expression
    (19) expression -> expression . LESS expression
    (20) expression -> expression . GREATEQ expression
    (21) expression -> expression . LESSEQ expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression

    CONSTANT        reduce using rule 4 (statement -> CONSTANT expression .)
    NAME            reduce using rule 4 (statement -> CONSTANT expression .)
    DEF             reduce using rule 4 (statement -> CONSTANT expression .)
    FOR             reduce using rule 4 (statement -> CONSTANT expression .)
    END             reduce using rule 4 (statement -> CONSTANT expression .)
    IF              reduce using rule 4 (statement -> CONSTANT expression .)
    $end            reduce using rule 4 (statement -> CONSTANT expression .)
    ELSE            reduce using rule 4 (statement -> CONSTANT expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 31
    GREATER         shift and go to state 38
    LESS            shift and go to state 33
    GREATEQ         shift and go to state 32
    LESSEQ          shift and go to state 35
    AND             shift and go to state 29
    OR              shift and go to state 30


state 20

    (5) statement -> NAME . EQUALS expression
    (6) statement -> NAME . EQUALS expression PARENL expression PARENR

    EQUALS          shift and go to state 28


state 21

    (1) statements -> statements statement .

    CONSTANT        reduce using rule 1 (statements -> statements statement .)
    NAME            reduce using rule 1 (statements -> statements statement .)
    DEF             reduce using rule 1 (statements -> statements statement .)
    FOR             reduce using rule 1 (statements -> statements statement .)
    END             reduce using rule 1 (statements -> statements statement .)
    IF              reduce using rule 1 (statements -> statements statement .)
    $end            reduce using rule 1 (statements -> statements statement .)
    ELSE            reduce using rule 1 (statements -> statements statement .)


state 22

    (24) expression -> MINUS expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . GREATER expression
    (19) expression -> expression . LESS expression
    (20) expression -> expression . GREATEQ expression
    (21) expression -> expression . LESSEQ expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression

    PLUS            reduce using rule 24 (expression -> MINUS expression .)
    MINUS           reduce using rule 24 (expression -> MINUS expression .)
    TIMES           reduce using rule 24 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 24 (expression -> MINUS expression .)
    GREATER         reduce using rule 24 (expression -> MINUS expression .)
    LESS            reduce using rule 24 (expression -> MINUS expression .)
    GREATEQ         reduce using rule 24 (expression -> MINUS expression .)
    LESSEQ          reduce using rule 24 (expression -> MINUS expression .)
    AND             reduce using rule 24 (expression -> MINUS expression .)
    OR              reduce using rule 24 (expression -> MINUS expression .)
    CONSTANT        reduce using rule 24 (expression -> MINUS expression .)
    NAME            reduce using rule 24 (expression -> MINUS expression .)
    DEF             reduce using rule 24 (expression -> MINUS expression .)
    FOR             reduce using rule 24 (expression -> MINUS expression .)
    $end            reduce using rule 24 (expression -> MINUS expression .)
    IF              reduce using rule 24 (expression -> MINUS expression .)
    END             reduce using rule 24 (expression -> MINUS expression .)
    ELSE            reduce using rule 24 (expression -> MINUS expression .)
    DO              reduce using rule 24 (expression -> MINUS expression .)
    PARENR          reduce using rule 24 (expression -> MINUS expression .)
    PARENL          reduce using rule 24 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! TIMES           [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 31 ]
  ! GREATER         [ shift and go to state 38 ]
  ! LESS            [ shift and go to state 33 ]
  ! GREATEQ         [ shift and go to state 32 ]
  ! LESSEQ          [ shift and go to state 35 ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]


state 23

    (7) statement -> DEF NAME . PARENL NAME PARENR DO new_scope statements end_scope END
    (8) statement -> DEF NAME . PARENL empty PARENR DO new_scope statements end_scope END
    (9) statement -> DEF NAME . DO new_scope statements end_scope END

    PARENL          shift and go to state 40
    DO              shift and go to state 39


state 24

    (10) statement -> new_scope if_statement . end_scope
    (35) end_scope -> . empty
    (33) empty -> .

    CONSTANT        reduce using rule 33 (empty -> .)
    NAME            reduce using rule 33 (empty -> .)
    DEF             reduce using rule 33 (empty -> .)
    FOR             reduce using rule 33 (empty -> .)
    $end            reduce using rule 33 (empty -> .)
    IF              reduce using rule 33 (empty -> .)
    END             reduce using rule 33 (empty -> .)
    ELSE            reduce using rule 33 (empty -> .)

    empty                          shift and go to state 41
    end_scope                      shift and go to state 42

state 25

    (11) if_statement -> IF . expression DO statements END
    (12) if_statement -> IF . expression DO statements ELSE statements END
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression GREATER expression
    (19) expression -> . expression LESS expression
    (20) expression -> . expression GREATEQ expression
    (21) expression -> . expression LESSEQ expression
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . MINUS expression
    (25) expression -> . PARENL new_scope expression end_scope PARENR
    (26) expression -> . INT
    (27) expression -> . DOUBLE
    (28) expression -> . CHAR
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . STRING
    (32) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 12
    INT             shift and go to state 15
    DOUBLE          shift and go to state 16
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    STRING          shift and go to state 7
    NAME            shift and go to state 18

    expression                     shift and go to state 43

state 26

    (13) statement -> FOR NAME . FOREXPR NAME DO new_scope statements end_scope END

    FOREXPR         shift and go to state 44


state 27

    (25) expression -> PARENL new_scope . expression end_scope PARENR
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression GREATER expression
    (19) expression -> . expression LESS expression
    (20) expression -> . expression GREATEQ expression
    (21) expression -> . expression LESSEQ expression
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . MINUS expression
    (25) expression -> . PARENL new_scope expression end_scope PARENR
    (26) expression -> . INT
    (27) expression -> . DOUBLE
    (28) expression -> . CHAR
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . STRING
    (32) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 12
    INT             shift and go to state 15
    DOUBLE          shift and go to state 16
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    STRING          shift and go to state 7
    NAME            shift and go to state 18

    expression                     shift and go to state 45

state 28

    (5) statement -> NAME EQUALS . expression
    (6) statement -> NAME EQUALS . expression PARENL expression PARENR
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression GREATER expression
    (19) expression -> . expression LESS expression
    (20) expression -> . expression GREATEQ expression
    (21) expression -> . expression LESSEQ expression
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . MINUS expression
    (25) expression -> . PARENL new_scope expression end_scope PARENR
    (26) expression -> . INT
    (27) expression -> . DOUBLE
    (28) expression -> . CHAR
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . STRING
    (32) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 12
    INT             shift and go to state 15
    DOUBLE          shift and go to state 16
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    STRING          shift and go to state 7
    NAME            shift and go to state 18

    expression                     shift and go to state 46

state 29

    (22) expression -> expression AND . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression GREATER expression
    (19) expression -> . expression LESS expression
    (20) expression -> . expression GREATEQ expression
    (21) expression -> . expression LESSEQ expression
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . MINUS expression
    (25) expression -> . PARENL new_scope expression end_scope PARENR
    (26) expression -> . INT
    (27) expression -> . DOUBLE
    (28) expression -> . CHAR
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . STRING
    (32) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 12
    INT             shift and go to state 15
    DOUBLE          shift and go to state 16
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    STRING          shift and go to state 7
    NAME            shift and go to state 18

    expression                     shift and go to state 47

state 30

    (23) expression -> expression OR . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression GREATER expression
    (19) expression -> . expression LESS expression
    (20) expression -> . expression GREATEQ expression
    (21) expression -> . expression LESSEQ expression
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . MINUS expression
    (25) expression -> . PARENL new_scope expression end_scope PARENR
    (26) expression -> . INT
    (27) expression -> . DOUBLE
    (28) expression -> . CHAR
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . STRING
    (32) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 12
    INT             shift and go to state 15
    DOUBLE          shift and go to state 16
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    STRING          shift and go to state 7
    NAME            shift and go to state 18

    expression                     shift and go to state 48

state 31

    (17) expression -> expression DIVIDE . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression GREATER expression
    (19) expression -> . expression LESS expression
    (20) expression -> . expression GREATEQ expression
    (21) expression -> . expression LESSEQ expression
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . MINUS expression
    (25) expression -> . PARENL new_scope expression end_scope PARENR
    (26) expression -> . INT
    (27) expression -> . DOUBLE
    (28) expression -> . CHAR
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . STRING
    (32) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 12
    INT             shift and go to state 15
    DOUBLE          shift and go to state 16
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    STRING          shift and go to state 7
    NAME            shift and go to state 18

    expression                     shift and go to state 49

state 32

    (20) expression -> expression GREATEQ . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression GREATER expression
    (19) expression -> . expression LESS expression
    (20) expression -> . expression GREATEQ expression
    (21) expression -> . expression LESSEQ expression
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . MINUS expression
    (25) expression -> . PARENL new_scope expression end_scope PARENR
    (26) expression -> . INT
    (27) expression -> . DOUBLE
    (28) expression -> . CHAR
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . STRING
    (32) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 12
    INT             shift and go to state 15
    DOUBLE          shift and go to state 16
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    STRING          shift and go to state 7
    NAME            shift and go to state 18

    expression                     shift and go to state 50

state 33

    (19) expression -> expression LESS . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression GREATER expression
    (19) expression -> . expression LESS expression
    (20) expression -> . expression GREATEQ expression
    (21) expression -> . expression LESSEQ expression
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . MINUS expression
    (25) expression -> . PARENL new_scope expression end_scope PARENR
    (26) expression -> . INT
    (27) expression -> . DOUBLE
    (28) expression -> . CHAR
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . STRING
    (32) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 12
    INT             shift and go to state 15
    DOUBLE          shift and go to state 16
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    STRING          shift and go to state 7
    NAME            shift and go to state 18

    expression                     shift and go to state 51

state 34

    (16) expression -> expression TIMES . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression GREATER expression
    (19) expression -> . expression LESS expression
    (20) expression -> . expression GREATEQ expression
    (21) expression -> . expression LESSEQ expression
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . MINUS expression
    (25) expression -> . PARENL new_scope expression end_scope PARENR
    (26) expression -> . INT
    (27) expression -> . DOUBLE
    (28) expression -> . CHAR
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . STRING
    (32) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 12
    INT             shift and go to state 15
    DOUBLE          shift and go to state 16
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    STRING          shift and go to state 7
    NAME            shift and go to state 18

    expression                     shift and go to state 52

state 35

    (21) expression -> expression LESSEQ . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression GREATER expression
    (19) expression -> . expression LESS expression
    (20) expression -> . expression GREATEQ expression
    (21) expression -> . expression LESSEQ expression
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . MINUS expression
    (25) expression -> . PARENL new_scope expression end_scope PARENR
    (26) expression -> . INT
    (27) expression -> . DOUBLE
    (28) expression -> . CHAR
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . STRING
    (32) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 12
    INT             shift and go to state 15
    DOUBLE          shift and go to state 16
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    STRING          shift and go to state 7
    NAME            shift and go to state 18

    expression                     shift and go to state 53

state 36

    (14) expression -> expression PLUS . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression GREATER expression
    (19) expression -> . expression LESS expression
    (20) expression -> . expression GREATEQ expression
    (21) expression -> . expression LESSEQ expression
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . MINUS expression
    (25) expression -> . PARENL new_scope expression end_scope PARENR
    (26) expression -> . INT
    (27) expression -> . DOUBLE
    (28) expression -> . CHAR
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . STRING
    (32) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 12
    INT             shift and go to state 15
    DOUBLE          shift and go to state 16
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    STRING          shift and go to state 7
    NAME            shift and go to state 18

    expression                     shift and go to state 54

state 37

    (15) expression -> expression MINUS . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression GREATER expression
    (19) expression -> . expression LESS expression
    (20) expression -> . expression GREATEQ expression
    (21) expression -> . expression LESSEQ expression
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . MINUS expression
    (25) expression -> . PARENL new_scope expression end_scope PARENR
    (26) expression -> . INT
    (27) expression -> . DOUBLE
    (28) expression -> . CHAR
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . STRING
    (32) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 12
    INT             shift and go to state 15
    DOUBLE          shift and go to state 16
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    STRING          shift and go to state 7
    NAME            shift and go to state 18

    expression                     shift and go to state 55

state 38

    (18) expression -> expression GREATER . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression GREATER expression
    (19) expression -> . expression LESS expression
    (20) expression -> . expression GREATEQ expression
    (21) expression -> . expression LESSEQ expression
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . MINUS expression
    (25) expression -> . PARENL new_scope expression end_scope PARENR
    (26) expression -> . INT
    (27) expression -> . DOUBLE
    (28) expression -> . CHAR
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . STRING
    (32) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 12
    INT             shift and go to state 15
    DOUBLE          shift and go to state 16
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    STRING          shift and go to state 7
    NAME            shift and go to state 18

    expression                     shift and go to state 56

state 39

    (9) statement -> DEF NAME DO . new_scope statements end_scope END
    (34) new_scope -> . empty
    (33) empty -> .

    CONSTANT        reduce using rule 33 (empty -> .)
    NAME            reduce using rule 33 (empty -> .)
    DEF             reduce using rule 33 (empty -> .)
    FOR             reduce using rule 33 (empty -> .)
    MINUS           reduce using rule 33 (empty -> .)
    PARENL          reduce using rule 33 (empty -> .)
    INT             reduce using rule 33 (empty -> .)
    DOUBLE          reduce using rule 33 (empty -> .)
    CHAR            reduce using rule 33 (empty -> .)
    TRUE            reduce using rule 33 (empty -> .)
    FALSE           reduce using rule 33 (empty -> .)
    STRING          reduce using rule 33 (empty -> .)
    IF              reduce using rule 33 (empty -> .)

    new_scope                      shift and go to state 57
    empty                          shift and go to state 10

state 40

    (7) statement -> DEF NAME PARENL . NAME PARENR DO new_scope statements end_scope END
    (8) statement -> DEF NAME PARENL . empty PARENR DO new_scope statements end_scope END
    (33) empty -> .

    NAME            shift and go to state 58
    PARENR          reduce using rule 33 (empty -> .)

    empty                          shift and go to state 59

state 41

    (35) end_scope -> empty .

    PARENR          reduce using rule 35 (end_scope -> empty .)
    CONSTANT        reduce using rule 35 (end_scope -> empty .)
    NAME            reduce using rule 35 (end_scope -> empty .)
    DEF             reduce using rule 35 (end_scope -> empty .)
    FOR             reduce using rule 35 (end_scope -> empty .)
    $end            reduce using rule 35 (end_scope -> empty .)
    IF              reduce using rule 35 (end_scope -> empty .)
    END             reduce using rule 35 (end_scope -> empty .)
    ELSE            reduce using rule 35 (end_scope -> empty .)


state 42

    (10) statement -> new_scope if_statement end_scope .

    CONSTANT        reduce using rule 10 (statement -> new_scope if_statement end_scope .)
    NAME            reduce using rule 10 (statement -> new_scope if_statement end_scope .)
    DEF             reduce using rule 10 (statement -> new_scope if_statement end_scope .)
    FOR             reduce using rule 10 (statement -> new_scope if_statement end_scope .)
    END             reduce using rule 10 (statement -> new_scope if_statement end_scope .)
    IF              reduce using rule 10 (statement -> new_scope if_statement end_scope .)
    $end            reduce using rule 10 (statement -> new_scope if_statement end_scope .)
    ELSE            reduce using rule 10 (statement -> new_scope if_statement end_scope .)


state 43

    (11) if_statement -> IF expression . DO statements END
    (12) if_statement -> IF expression . DO statements ELSE statements END
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . GREATER expression
    (19) expression -> expression . LESS expression
    (20) expression -> expression . GREATEQ expression
    (21) expression -> expression . LESSEQ expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression

    DO              shift and go to state 60
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 31
    GREATER         shift and go to state 38
    LESS            shift and go to state 33
    GREATEQ         shift and go to state 32
    LESSEQ          shift and go to state 35
    AND             shift and go to state 29
    OR              shift and go to state 30


state 44

    (13) statement -> FOR NAME FOREXPR . NAME DO new_scope statements end_scope END

    NAME            shift and go to state 61


state 45

    (25) expression -> PARENL new_scope expression . end_scope PARENR
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . GREATER expression
    (19) expression -> expression . LESS expression
    (20) expression -> expression . GREATEQ expression
    (21) expression -> expression . LESSEQ expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (35) end_scope -> . empty
    (33) empty -> .

    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 31
    GREATER         shift and go to state 38
    LESS            shift and go to state 33
    GREATEQ         shift and go to state 32
    LESSEQ          shift and go to state 35
    AND             shift and go to state 29
    OR              shift and go to state 30
    PARENR          reduce using rule 33 (empty -> .)

    empty                          shift and go to state 41
    end_scope                      shift and go to state 62

state 46

    (5) statement -> NAME EQUALS expression .
    (6) statement -> NAME EQUALS expression . PARENL expression PARENR
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . GREATER expression
    (19) expression -> expression . LESS expression
    (20) expression -> expression . GREATEQ expression
    (21) expression -> expression . LESSEQ expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression

    CONSTANT        reduce using rule 5 (statement -> NAME EQUALS expression .)
    NAME            reduce using rule 5 (statement -> NAME EQUALS expression .)
    DEF             reduce using rule 5 (statement -> NAME EQUALS expression .)
    FOR             reduce using rule 5 (statement -> NAME EQUALS expression .)
    END             reduce using rule 5 (statement -> NAME EQUALS expression .)
    IF              reduce using rule 5 (statement -> NAME EQUALS expression .)
    $end            reduce using rule 5 (statement -> NAME EQUALS expression .)
    ELSE            reduce using rule 5 (statement -> NAME EQUALS expression .)
    PARENL          shift and go to state 63
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 31
    GREATER         shift and go to state 38
    LESS            shift and go to state 33
    GREATEQ         shift and go to state 32
    LESSEQ          shift and go to state 35
    AND             shift and go to state 29
    OR              shift and go to state 30


state 47

    (22) expression -> expression AND expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . GREATER expression
    (19) expression -> expression . LESS expression
    (20) expression -> expression . GREATEQ expression
    (21) expression -> expression . LESSEQ expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression

    AND             reduce using rule 22 (expression -> expression AND expression .)
    OR              reduce using rule 22 (expression -> expression AND expression .)
    CONSTANT        reduce using rule 22 (expression -> expression AND expression .)
    NAME            reduce using rule 22 (expression -> expression AND expression .)
    DEF             reduce using rule 22 (expression -> expression AND expression .)
    FOR             reduce using rule 22 (expression -> expression AND expression .)
    $end            reduce using rule 22 (expression -> expression AND expression .)
    IF              reduce using rule 22 (expression -> expression AND expression .)
    END             reduce using rule 22 (expression -> expression AND expression .)
    ELSE            reduce using rule 22 (expression -> expression AND expression .)
    DO              reduce using rule 22 (expression -> expression AND expression .)
    PARENR          reduce using rule 22 (expression -> expression AND expression .)
    PARENL          reduce using rule 22 (expression -> expression AND expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 31
    GREATER         shift and go to state 38
    LESS            shift and go to state 33
    GREATEQ         shift and go to state 32
    LESSEQ          shift and go to state 35

  ! PLUS            [ reduce using rule 22 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 22 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 22 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 22 (expression -> expression AND expression .) ]
  ! GREATER         [ reduce using rule 22 (expression -> expression AND expression .) ]
  ! LESS            [ reduce using rule 22 (expression -> expression AND expression .) ]
  ! GREATEQ         [ reduce using rule 22 (expression -> expression AND expression .) ]
  ! LESSEQ          [ reduce using rule 22 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]


state 48

    (23) expression -> expression OR expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . GREATER expression
    (19) expression -> expression . LESS expression
    (20) expression -> expression . GREATEQ expression
    (21) expression -> expression . LESSEQ expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression

    AND             reduce using rule 23 (expression -> expression OR expression .)
    OR              reduce using rule 23 (expression -> expression OR expression .)
    CONSTANT        reduce using rule 23 (expression -> expression OR expression .)
    NAME            reduce using rule 23 (expression -> expression OR expression .)
    DEF             reduce using rule 23 (expression -> expression OR expression .)
    FOR             reduce using rule 23 (expression -> expression OR expression .)
    $end            reduce using rule 23 (expression -> expression OR expression .)
    IF              reduce using rule 23 (expression -> expression OR expression .)
    END             reduce using rule 23 (expression -> expression OR expression .)
    ELSE            reduce using rule 23 (expression -> expression OR expression .)
    DO              reduce using rule 23 (expression -> expression OR expression .)
    PARENR          reduce using rule 23 (expression -> expression OR expression .)
    PARENL          reduce using rule 23 (expression -> expression OR expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 31
    GREATER         shift and go to state 38
    LESS            shift and go to state 33
    GREATEQ         shift and go to state 32
    LESSEQ          shift and go to state 35

  ! PLUS            [ reduce using rule 23 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 23 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 23 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 23 (expression -> expression OR expression .) ]
  ! GREATER         [ reduce using rule 23 (expression -> expression OR expression .) ]
  ! LESS            [ reduce using rule 23 (expression -> expression OR expression .) ]
  ! GREATEQ         [ reduce using rule 23 (expression -> expression OR expression .) ]
  ! LESSEQ          [ reduce using rule 23 (expression -> expression OR expression .) ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]


state 49

    (17) expression -> expression DIVIDE expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . GREATER expression
    (19) expression -> expression . LESS expression
    (20) expression -> expression . GREATEQ expression
    (21) expression -> expression . LESSEQ expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression

    PLUS            reduce using rule 17 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 17 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 17 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 17 (expression -> expression DIVIDE expression .)
    GREATER         reduce using rule 17 (expression -> expression DIVIDE expression .)
    LESS            reduce using rule 17 (expression -> expression DIVIDE expression .)
    GREATEQ         reduce using rule 17 (expression -> expression DIVIDE expression .)
    LESSEQ          reduce using rule 17 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 17 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 17 (expression -> expression DIVIDE expression .)
    CONSTANT        reduce using rule 17 (expression -> expression DIVIDE expression .)
    NAME            reduce using rule 17 (expression -> expression DIVIDE expression .)
    DEF             reduce using rule 17 (expression -> expression DIVIDE expression .)
    FOR             reduce using rule 17 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 17 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 17 (expression -> expression DIVIDE expression .)
    END             reduce using rule 17 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 17 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 17 (expression -> expression DIVIDE expression .)
    PARENR          reduce using rule 17 (expression -> expression DIVIDE expression .)
    PARENL          reduce using rule 17 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! TIMES           [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 31 ]
  ! GREATER         [ shift and go to state 38 ]
  ! LESS            [ shift and go to state 33 ]
  ! GREATEQ         [ shift and go to state 32 ]
  ! LESSEQ          [ shift and go to state 35 ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]


state 50

    (20) expression -> expression GREATEQ expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . GREATER expression
    (19) expression -> expression . LESS expression
    (20) expression -> expression . GREATEQ expression
    (21) expression -> expression . LESSEQ expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression

    GREATER         reduce using rule 20 (expression -> expression GREATEQ expression .)
    LESS            reduce using rule 20 (expression -> expression GREATEQ expression .)
    GREATEQ         reduce using rule 20 (expression -> expression GREATEQ expression .)
    LESSEQ          reduce using rule 20 (expression -> expression GREATEQ expression .)
    AND             reduce using rule 20 (expression -> expression GREATEQ expression .)
    OR              reduce using rule 20 (expression -> expression GREATEQ expression .)
    CONSTANT        reduce using rule 20 (expression -> expression GREATEQ expression .)
    NAME            reduce using rule 20 (expression -> expression GREATEQ expression .)
    DEF             reduce using rule 20 (expression -> expression GREATEQ expression .)
    FOR             reduce using rule 20 (expression -> expression GREATEQ expression .)
    $end            reduce using rule 20 (expression -> expression GREATEQ expression .)
    IF              reduce using rule 20 (expression -> expression GREATEQ expression .)
    END             reduce using rule 20 (expression -> expression GREATEQ expression .)
    ELSE            reduce using rule 20 (expression -> expression GREATEQ expression .)
    DO              reduce using rule 20 (expression -> expression GREATEQ expression .)
    PARENR          reduce using rule 20 (expression -> expression GREATEQ expression .)
    PARENL          reduce using rule 20 (expression -> expression GREATEQ expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 31

  ! PLUS            [ reduce using rule 20 (expression -> expression GREATEQ expression .) ]
  ! MINUS           [ reduce using rule 20 (expression -> expression GREATEQ expression .) ]
  ! TIMES           [ reduce using rule 20 (expression -> expression GREATEQ expression .) ]
  ! DIVIDE          [ reduce using rule 20 (expression -> expression GREATEQ expression .) ]
  ! GREATER         [ shift and go to state 38 ]
  ! LESS            [ shift and go to state 33 ]
  ! GREATEQ         [ shift and go to state 32 ]
  ! LESSEQ          [ shift and go to state 35 ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]


state 51

    (19) expression -> expression LESS expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . GREATER expression
    (19) expression -> expression . LESS expression
    (20) expression -> expression . GREATEQ expression
    (21) expression -> expression . LESSEQ expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression

    GREATER         reduce using rule 19 (expression -> expression LESS expression .)
    LESS            reduce using rule 19 (expression -> expression LESS expression .)
    GREATEQ         reduce using rule 19 (expression -> expression LESS expression .)
    LESSEQ          reduce using rule 19 (expression -> expression LESS expression .)
    AND             reduce using rule 19 (expression -> expression LESS expression .)
    OR              reduce using rule 19 (expression -> expression LESS expression .)
    CONSTANT        reduce using rule 19 (expression -> expression LESS expression .)
    NAME            reduce using rule 19 (expression -> expression LESS expression .)
    DEF             reduce using rule 19 (expression -> expression LESS expression .)
    FOR             reduce using rule 19 (expression -> expression LESS expression .)
    $end            reduce using rule 19 (expression -> expression LESS expression .)
    IF              reduce using rule 19 (expression -> expression LESS expression .)
    END             reduce using rule 19 (expression -> expression LESS expression .)
    ELSE            reduce using rule 19 (expression -> expression LESS expression .)
    DO              reduce using rule 19 (expression -> expression LESS expression .)
    PARENR          reduce using rule 19 (expression -> expression LESS expression .)
    PARENL          reduce using rule 19 (expression -> expression LESS expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 31

  ! PLUS            [ reduce using rule 19 (expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 19 (expression -> expression LESS expression .) ]
  ! TIMES           [ reduce using rule 19 (expression -> expression LESS expression .) ]
  ! DIVIDE          [ reduce using rule 19 (expression -> expression LESS expression .) ]
  ! GREATER         [ shift and go to state 38 ]
  ! LESS            [ shift and go to state 33 ]
  ! GREATEQ         [ shift and go to state 32 ]
  ! LESSEQ          [ shift and go to state 35 ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]


state 52

    (16) expression -> expression TIMES expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . GREATER expression
    (19) expression -> expression . LESS expression
    (20) expression -> expression . GREATEQ expression
    (21) expression -> expression . LESSEQ expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression

    PLUS            reduce using rule 16 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 16 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 16 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 16 (expression -> expression TIMES expression .)
    GREATER         reduce using rule 16 (expression -> expression TIMES expression .)
    LESS            reduce using rule 16 (expression -> expression TIMES expression .)
    GREATEQ         reduce using rule 16 (expression -> expression TIMES expression .)
    LESSEQ          reduce using rule 16 (expression -> expression TIMES expression .)
    AND             reduce using rule 16 (expression -> expression TIMES expression .)
    OR              reduce using rule 16 (expression -> expression TIMES expression .)
    CONSTANT        reduce using rule 16 (expression -> expression TIMES expression .)
    NAME            reduce using rule 16 (expression -> expression TIMES expression .)
    DEF             reduce using rule 16 (expression -> expression TIMES expression .)
    FOR             reduce using rule 16 (expression -> expression TIMES expression .)
    $end            reduce using rule 16 (expression -> expression TIMES expression .)
    IF              reduce using rule 16 (expression -> expression TIMES expression .)
    END             reduce using rule 16 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 16 (expression -> expression TIMES expression .)
    DO              reduce using rule 16 (expression -> expression TIMES expression .)
    PARENR          reduce using rule 16 (expression -> expression TIMES expression .)
    PARENL          reduce using rule 16 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! TIMES           [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 31 ]
  ! GREATER         [ shift and go to state 38 ]
  ! LESS            [ shift and go to state 33 ]
  ! GREATEQ         [ shift and go to state 32 ]
  ! LESSEQ          [ shift and go to state 35 ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]


state 53

    (21) expression -> expression LESSEQ expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . GREATER expression
    (19) expression -> expression . LESS expression
    (20) expression -> expression . GREATEQ expression
    (21) expression -> expression . LESSEQ expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression

    GREATER         reduce using rule 21 (expression -> expression LESSEQ expression .)
    LESS            reduce using rule 21 (expression -> expression LESSEQ expression .)
    GREATEQ         reduce using rule 21 (expression -> expression LESSEQ expression .)
    LESSEQ          reduce using rule 21 (expression -> expression LESSEQ expression .)
    AND             reduce using rule 21 (expression -> expression LESSEQ expression .)
    OR              reduce using rule 21 (expression -> expression LESSEQ expression .)
    CONSTANT        reduce using rule 21 (expression -> expression LESSEQ expression .)
    NAME            reduce using rule 21 (expression -> expression LESSEQ expression .)
    DEF             reduce using rule 21 (expression -> expression LESSEQ expression .)
    FOR             reduce using rule 21 (expression -> expression LESSEQ expression .)
    $end            reduce using rule 21 (expression -> expression LESSEQ expression .)
    IF              reduce using rule 21 (expression -> expression LESSEQ expression .)
    END             reduce using rule 21 (expression -> expression LESSEQ expression .)
    ELSE            reduce using rule 21 (expression -> expression LESSEQ expression .)
    DO              reduce using rule 21 (expression -> expression LESSEQ expression .)
    PARENR          reduce using rule 21 (expression -> expression LESSEQ expression .)
    PARENL          reduce using rule 21 (expression -> expression LESSEQ expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 31

  ! PLUS            [ reduce using rule 21 (expression -> expression LESSEQ expression .) ]
  ! MINUS           [ reduce using rule 21 (expression -> expression LESSEQ expression .) ]
  ! TIMES           [ reduce using rule 21 (expression -> expression LESSEQ expression .) ]
  ! DIVIDE          [ reduce using rule 21 (expression -> expression LESSEQ expression .) ]
  ! GREATER         [ shift and go to state 38 ]
  ! LESS            [ shift and go to state 33 ]
  ! GREATEQ         [ shift and go to state 32 ]
  ! LESSEQ          [ shift and go to state 35 ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]


state 54

    (14) expression -> expression PLUS expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . GREATER expression
    (19) expression -> expression . LESS expression
    (20) expression -> expression . GREATEQ expression
    (21) expression -> expression . LESSEQ expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression

    PLUS            reduce using rule 14 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 14 (expression -> expression PLUS expression .)
    GREATER         reduce using rule 14 (expression -> expression PLUS expression .)
    LESS            reduce using rule 14 (expression -> expression PLUS expression .)
    GREATEQ         reduce using rule 14 (expression -> expression PLUS expression .)
    LESSEQ          reduce using rule 14 (expression -> expression PLUS expression .)
    AND             reduce using rule 14 (expression -> expression PLUS expression .)
    OR              reduce using rule 14 (expression -> expression PLUS expression .)
    CONSTANT        reduce using rule 14 (expression -> expression PLUS expression .)
    NAME            reduce using rule 14 (expression -> expression PLUS expression .)
    DEF             reduce using rule 14 (expression -> expression PLUS expression .)
    FOR             reduce using rule 14 (expression -> expression PLUS expression .)
    $end            reduce using rule 14 (expression -> expression PLUS expression .)
    IF              reduce using rule 14 (expression -> expression PLUS expression .)
    END             reduce using rule 14 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 14 (expression -> expression PLUS expression .)
    DO              reduce using rule 14 (expression -> expression PLUS expression .)
    PARENR          reduce using rule 14 (expression -> expression PLUS expression .)
    PARENL          reduce using rule 14 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 31

  ! TIMES           [ reduce using rule 14 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 14 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! GREATER         [ shift and go to state 38 ]
  ! LESS            [ shift and go to state 33 ]
  ! GREATEQ         [ shift and go to state 32 ]
  ! LESSEQ          [ shift and go to state 35 ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]


state 55

    (15) expression -> expression MINUS expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . GREATER expression
    (19) expression -> expression . LESS expression
    (20) expression -> expression . GREATEQ expression
    (21) expression -> expression . LESSEQ expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression

    PLUS            reduce using rule 15 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 15 (expression -> expression MINUS expression .)
    GREATER         reduce using rule 15 (expression -> expression MINUS expression .)
    LESS            reduce using rule 15 (expression -> expression MINUS expression .)
    GREATEQ         reduce using rule 15 (expression -> expression MINUS expression .)
    LESSEQ          reduce using rule 15 (expression -> expression MINUS expression .)
    AND             reduce using rule 15 (expression -> expression MINUS expression .)
    OR              reduce using rule 15 (expression -> expression MINUS expression .)
    CONSTANT        reduce using rule 15 (expression -> expression MINUS expression .)
    NAME            reduce using rule 15 (expression -> expression MINUS expression .)
    DEF             reduce using rule 15 (expression -> expression MINUS expression .)
    FOR             reduce using rule 15 (expression -> expression MINUS expression .)
    $end            reduce using rule 15 (expression -> expression MINUS expression .)
    IF              reduce using rule 15 (expression -> expression MINUS expression .)
    END             reduce using rule 15 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 15 (expression -> expression MINUS expression .)
    DO              reduce using rule 15 (expression -> expression MINUS expression .)
    PARENR          reduce using rule 15 (expression -> expression MINUS expression .)
    PARENL          reduce using rule 15 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 31

  ! TIMES           [ reduce using rule 15 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 15 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! GREATER         [ shift and go to state 38 ]
  ! LESS            [ shift and go to state 33 ]
  ! GREATEQ         [ shift and go to state 32 ]
  ! LESSEQ          [ shift and go to state 35 ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]


state 56

    (18) expression -> expression GREATER expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . GREATER expression
    (19) expression -> expression . LESS expression
    (20) expression -> expression . GREATEQ expression
    (21) expression -> expression . LESSEQ expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression

    GREATER         reduce using rule 18 (expression -> expression GREATER expression .)
    LESS            reduce using rule 18 (expression -> expression GREATER expression .)
    GREATEQ         reduce using rule 18 (expression -> expression GREATER expression .)
    LESSEQ          reduce using rule 18 (expression -> expression GREATER expression .)
    AND             reduce using rule 18 (expression -> expression GREATER expression .)
    OR              reduce using rule 18 (expression -> expression GREATER expression .)
    CONSTANT        reduce using rule 18 (expression -> expression GREATER expression .)
    NAME            reduce using rule 18 (expression -> expression GREATER expression .)
    DEF             reduce using rule 18 (expression -> expression GREATER expression .)
    FOR             reduce using rule 18 (expression -> expression GREATER expression .)
    $end            reduce using rule 18 (expression -> expression GREATER expression .)
    IF              reduce using rule 18 (expression -> expression GREATER expression .)
    END             reduce using rule 18 (expression -> expression GREATER expression .)
    ELSE            reduce using rule 18 (expression -> expression GREATER expression .)
    DO              reduce using rule 18 (expression -> expression GREATER expression .)
    PARENR          reduce using rule 18 (expression -> expression GREATER expression .)
    PARENL          reduce using rule 18 (expression -> expression GREATER expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 31

  ! PLUS            [ reduce using rule 18 (expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 18 (expression -> expression GREATER expression .) ]
  ! TIMES           [ reduce using rule 18 (expression -> expression GREATER expression .) ]
  ! DIVIDE          [ reduce using rule 18 (expression -> expression GREATER expression .) ]
  ! GREATER         [ shift and go to state 38 ]
  ! LESS            [ shift and go to state 33 ]
  ! GREATEQ         [ shift and go to state 32 ]
  ! LESSEQ          [ shift and go to state 35 ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]


state 57

    (9) statement -> DEF NAME DO new_scope . statements end_scope END
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statements -> . expression
    (4) statement -> . CONSTANT expression
    (5) statement -> . NAME EQUALS expression
    (6) statement -> . NAME EQUALS expression PARENL expression PARENR
    (7) statement -> . DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (8) statement -> . DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
    (9) statement -> . DEF NAME DO new_scope statements end_scope END
    (10) statement -> . new_scope if_statement end_scope
    (13) statement -> . FOR NAME FOREXPR NAME DO new_scope statements end_scope END
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression GREATER expression
    (19) expression -> . expression LESS expression
    (20) expression -> . expression GREATEQ expression
    (21) expression -> . expression LESSEQ expression
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . MINUS expression
    (25) expression -> . PARENL new_scope expression end_scope PARENR
    (26) expression -> . INT
    (27) expression -> . DOUBLE
    (28) expression -> . CHAR
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . STRING
    (32) expression -> . NAME
    (34) new_scope -> . empty
    (33) empty -> .

    CONSTANT        shift and go to state 1
    NAME            shift and go to state 14
    DEF             shift and go to state 6
    FOR             shift and go to state 11
    MINUS           shift and go to state 5
    PARENL          shift and go to state 12
    INT             shift and go to state 15
    DOUBLE          shift and go to state 16
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    STRING          shift and go to state 7
    IF              reduce using rule 33 (empty -> .)

    statements                     shift and go to state 64
    new_scope                      shift and go to state 8
    statement                      shift and go to state 9
    expression                     shift and go to state 17
    empty                          shift and go to state 10

state 58

    (7) statement -> DEF NAME PARENL NAME . PARENR DO new_scope statements end_scope END

    PARENR          shift and go to state 65


state 59

    (8) statement -> DEF NAME PARENL empty . PARENR DO new_scope statements end_scope END

    PARENR          shift and go to state 66


state 60

    (11) if_statement -> IF expression DO . statements END
    (12) if_statement -> IF expression DO . statements ELSE statements END
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statements -> . expression
    (4) statement -> . CONSTANT expression
    (5) statement -> . NAME EQUALS expression
    (6) statement -> . NAME EQUALS expression PARENL expression PARENR
    (7) statement -> . DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (8) statement -> . DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
    (9) statement -> . DEF NAME DO new_scope statements end_scope END
    (10) statement -> . new_scope if_statement end_scope
    (13) statement -> . FOR NAME FOREXPR NAME DO new_scope statements end_scope END
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression GREATER expression
    (19) expression -> . expression LESS expression
    (20) expression -> . expression GREATEQ expression
    (21) expression -> . expression LESSEQ expression
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . MINUS expression
    (25) expression -> . PARENL new_scope expression end_scope PARENR
    (26) expression -> . INT
    (27) expression -> . DOUBLE
    (28) expression -> . CHAR
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . STRING
    (32) expression -> . NAME
    (34) new_scope -> . empty
    (33) empty -> .

    CONSTANT        shift and go to state 1
    NAME            shift and go to state 14
    DEF             shift and go to state 6
    FOR             shift and go to state 11
    MINUS           shift and go to state 5
    PARENL          shift and go to state 12
    INT             shift and go to state 15
    DOUBLE          shift and go to state 16
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    STRING          shift and go to state 7
    IF              reduce using rule 33 (empty -> .)

    statements                     shift and go to state 67
    new_scope                      shift and go to state 8
    statement                      shift and go to state 9
    expression                     shift and go to state 17
    empty                          shift and go to state 10

state 61

    (13) statement -> FOR NAME FOREXPR NAME . DO new_scope statements end_scope END

    DO              shift and go to state 68


state 62

    (25) expression -> PARENL new_scope expression end_scope . PARENR

    PARENR          shift and go to state 69


state 63

    (6) statement -> NAME EQUALS expression PARENL . expression PARENR
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression GREATER expression
    (19) expression -> . expression LESS expression
    (20) expression -> . expression GREATEQ expression
    (21) expression -> . expression LESSEQ expression
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . MINUS expression
    (25) expression -> . PARENL new_scope expression end_scope PARENR
    (26) expression -> . INT
    (27) expression -> . DOUBLE
    (28) expression -> . CHAR
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . STRING
    (32) expression -> . NAME

    MINUS           shift and go to state 5
    PARENL          shift and go to state 12
    INT             shift and go to state 15
    DOUBLE          shift and go to state 16
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    STRING          shift and go to state 7
    NAME            shift and go to state 18

    expression                     shift and go to state 70

state 64

    (9) statement -> DEF NAME DO new_scope statements . end_scope END
    (1) statements -> statements . statement
    (35) end_scope -> . empty
    (4) statement -> . CONSTANT expression
    (5) statement -> . NAME EQUALS expression
    (6) statement -> . NAME EQUALS expression PARENL expression PARENR
    (7) statement -> . DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (8) statement -> . DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
    (9) statement -> . DEF NAME DO new_scope statements end_scope END
    (10) statement -> . new_scope if_statement end_scope
    (13) statement -> . FOR NAME FOREXPR NAME DO new_scope statements end_scope END
    (33) empty -> .
    (34) new_scope -> . empty

    CONSTANT        shift and go to state 1
    NAME            shift and go to state 20
    DEF             shift and go to state 6
    FOR             shift and go to state 11
    END             reduce using rule 33 (empty -> .)
    IF              reduce using rule 33 (empty -> .)

    end_scope                      shift and go to state 71
    new_scope                      shift and go to state 8
    statement                      shift and go to state 21
    empty                          shift and go to state 72

state 65

    (7) statement -> DEF NAME PARENL NAME PARENR . DO new_scope statements end_scope END

    DO              shift and go to state 73


state 66

    (8) statement -> DEF NAME PARENL empty PARENR . DO new_scope statements end_scope END

    DO              shift and go to state 74


state 67

    (11) if_statement -> IF expression DO statements . END
    (12) if_statement -> IF expression DO statements . ELSE statements END
    (1) statements -> statements . statement
    (4) statement -> . CONSTANT expression
    (5) statement -> . NAME EQUALS expression
    (6) statement -> . NAME EQUALS expression PARENL expression PARENR
    (7) statement -> . DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (8) statement -> . DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
    (9) statement -> . DEF NAME DO new_scope statements end_scope END
    (10) statement -> . new_scope if_statement end_scope
    (13) statement -> . FOR NAME FOREXPR NAME DO new_scope statements end_scope END
    (34) new_scope -> . empty
    (33) empty -> .

    END             shift and go to state 75
    ELSE            shift and go to state 76
    CONSTANT        shift and go to state 1
    NAME            shift and go to state 20
    DEF             shift and go to state 6
    FOR             shift and go to state 11
    IF              reduce using rule 33 (empty -> .)

    new_scope                      shift and go to state 8
    statement                      shift and go to state 21
    empty                          shift and go to state 10

state 68

    (13) statement -> FOR NAME FOREXPR NAME DO . new_scope statements end_scope END
    (34) new_scope -> . empty
    (33) empty -> .

    CONSTANT        reduce using rule 33 (empty -> .)
    NAME            reduce using rule 33 (empty -> .)
    DEF             reduce using rule 33 (empty -> .)
    FOR             reduce using rule 33 (empty -> .)
    MINUS           reduce using rule 33 (empty -> .)
    PARENL          reduce using rule 33 (empty -> .)
    INT             reduce using rule 33 (empty -> .)
    DOUBLE          reduce using rule 33 (empty -> .)
    CHAR            reduce using rule 33 (empty -> .)
    TRUE            reduce using rule 33 (empty -> .)
    FALSE           reduce using rule 33 (empty -> .)
    STRING          reduce using rule 33 (empty -> .)
    IF              reduce using rule 33 (empty -> .)

    new_scope                      shift and go to state 77
    empty                          shift and go to state 10

state 69

    (25) expression -> PARENL new_scope expression end_scope PARENR .

    PLUS            reduce using rule 25 (expression -> PARENL new_scope expression end_scope PARENR .)
    MINUS           reduce using rule 25 (expression -> PARENL new_scope expression end_scope PARENR .)
    TIMES           reduce using rule 25 (expression -> PARENL new_scope expression end_scope PARENR .)
    DIVIDE          reduce using rule 25 (expression -> PARENL new_scope expression end_scope PARENR .)
    GREATER         reduce using rule 25 (expression -> PARENL new_scope expression end_scope PARENR .)
    LESS            reduce using rule 25 (expression -> PARENL new_scope expression end_scope PARENR .)
    GREATEQ         reduce using rule 25 (expression -> PARENL new_scope expression end_scope PARENR .)
    LESSEQ          reduce using rule 25 (expression -> PARENL new_scope expression end_scope PARENR .)
    AND             reduce using rule 25 (expression -> PARENL new_scope expression end_scope PARENR .)
    OR              reduce using rule 25 (expression -> PARENL new_scope expression end_scope PARENR .)
    CONSTANT        reduce using rule 25 (expression -> PARENL new_scope expression end_scope PARENR .)
    NAME            reduce using rule 25 (expression -> PARENL new_scope expression end_scope PARENR .)
    DEF             reduce using rule 25 (expression -> PARENL new_scope expression end_scope PARENR .)
    FOR             reduce using rule 25 (expression -> PARENL new_scope expression end_scope PARENR .)
    $end            reduce using rule 25 (expression -> PARENL new_scope expression end_scope PARENR .)
    IF              reduce using rule 25 (expression -> PARENL new_scope expression end_scope PARENR .)
    END             reduce using rule 25 (expression -> PARENL new_scope expression end_scope PARENR .)
    ELSE            reduce using rule 25 (expression -> PARENL new_scope expression end_scope PARENR .)
    DO              reduce using rule 25 (expression -> PARENL new_scope expression end_scope PARENR .)
    PARENR          reduce using rule 25 (expression -> PARENL new_scope expression end_scope PARENR .)
    PARENL          reduce using rule 25 (expression -> PARENL new_scope expression end_scope PARENR .)


state 70

    (6) statement -> NAME EQUALS expression PARENL expression . PARENR
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . GREATER expression
    (19) expression -> expression . LESS expression
    (20) expression -> expression . GREATEQ expression
    (21) expression -> expression . LESSEQ expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression

    PARENR          shift and go to state 78
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 31
    GREATER         shift and go to state 38
    LESS            shift and go to state 33
    GREATEQ         shift and go to state 32
    LESSEQ          shift and go to state 35
    AND             shift and go to state 29
    OR              shift and go to state 30


state 71

    (9) statement -> DEF NAME DO new_scope statements end_scope . END

    END             shift and go to state 79


state 72

    (35) end_scope -> empty .
    (34) new_scope -> empty .

    END             reduce using rule 35 (end_scope -> empty .)
    IF              reduce using rule 34 (new_scope -> empty .)


state 73

    (7) statement -> DEF NAME PARENL NAME PARENR DO . new_scope statements end_scope END
    (34) new_scope -> . empty
    (33) empty -> .

    CONSTANT        reduce using rule 33 (empty -> .)
    NAME            reduce using rule 33 (empty -> .)
    DEF             reduce using rule 33 (empty -> .)
    FOR             reduce using rule 33 (empty -> .)
    MINUS           reduce using rule 33 (empty -> .)
    PARENL          reduce using rule 33 (empty -> .)
    INT             reduce using rule 33 (empty -> .)
    DOUBLE          reduce using rule 33 (empty -> .)
    CHAR            reduce using rule 33 (empty -> .)
    TRUE            reduce using rule 33 (empty -> .)
    FALSE           reduce using rule 33 (empty -> .)
    STRING          reduce using rule 33 (empty -> .)
    IF              reduce using rule 33 (empty -> .)

    new_scope                      shift and go to state 80
    empty                          shift and go to state 10

state 74

    (8) statement -> DEF NAME PARENL empty PARENR DO . new_scope statements end_scope END
    (34) new_scope -> . empty
    (33) empty -> .

    CONSTANT        reduce using rule 33 (empty -> .)
    NAME            reduce using rule 33 (empty -> .)
    DEF             reduce using rule 33 (empty -> .)
    FOR             reduce using rule 33 (empty -> .)
    MINUS           reduce using rule 33 (empty -> .)
    PARENL          reduce using rule 33 (empty -> .)
    INT             reduce using rule 33 (empty -> .)
    DOUBLE          reduce using rule 33 (empty -> .)
    CHAR            reduce using rule 33 (empty -> .)
    TRUE            reduce using rule 33 (empty -> .)
    FALSE           reduce using rule 33 (empty -> .)
    STRING          reduce using rule 33 (empty -> .)
    IF              reduce using rule 33 (empty -> .)

    new_scope                      shift and go to state 81
    empty                          shift and go to state 10

state 75

    (11) if_statement -> IF expression DO statements END .

    CONSTANT        reduce using rule 11 (if_statement -> IF expression DO statements END .)
    NAME            reduce using rule 11 (if_statement -> IF expression DO statements END .)
    DEF             reduce using rule 11 (if_statement -> IF expression DO statements END .)
    FOR             reduce using rule 11 (if_statement -> IF expression DO statements END .)
    $end            reduce using rule 11 (if_statement -> IF expression DO statements END .)
    IF              reduce using rule 11 (if_statement -> IF expression DO statements END .)
    END             reduce using rule 11 (if_statement -> IF expression DO statements END .)
    ELSE            reduce using rule 11 (if_statement -> IF expression DO statements END .)


state 76

    (12) if_statement -> IF expression DO statements ELSE . statements END
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statements -> . expression
    (4) statement -> . CONSTANT expression
    (5) statement -> . NAME EQUALS expression
    (6) statement -> . NAME EQUALS expression PARENL expression PARENR
    (7) statement -> . DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (8) statement -> . DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
    (9) statement -> . DEF NAME DO new_scope statements end_scope END
    (10) statement -> . new_scope if_statement end_scope
    (13) statement -> . FOR NAME FOREXPR NAME DO new_scope statements end_scope END
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression GREATER expression
    (19) expression -> . expression LESS expression
    (20) expression -> . expression GREATEQ expression
    (21) expression -> . expression LESSEQ expression
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . MINUS expression
    (25) expression -> . PARENL new_scope expression end_scope PARENR
    (26) expression -> . INT
    (27) expression -> . DOUBLE
    (28) expression -> . CHAR
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . STRING
    (32) expression -> . NAME
    (34) new_scope -> . empty
    (33) empty -> .

    CONSTANT        shift and go to state 1
    NAME            shift and go to state 14
    DEF             shift and go to state 6
    FOR             shift and go to state 11
    MINUS           shift and go to state 5
    PARENL          shift and go to state 12
    INT             shift and go to state 15
    DOUBLE          shift and go to state 16
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    STRING          shift and go to state 7
    IF              reduce using rule 33 (empty -> .)

    statements                     shift and go to state 82
    new_scope                      shift and go to state 8
    statement                      shift and go to state 9
    expression                     shift and go to state 17
    empty                          shift and go to state 10

state 77

    (13) statement -> FOR NAME FOREXPR NAME DO new_scope . statements end_scope END
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statements -> . expression
    (4) statement -> . CONSTANT expression
    (5) statement -> . NAME EQUALS expression
    (6) statement -> . NAME EQUALS expression PARENL expression PARENR
    (7) statement -> . DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (8) statement -> . DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
    (9) statement -> . DEF NAME DO new_scope statements end_scope END
    (10) statement -> . new_scope if_statement end_scope
    (13) statement -> . FOR NAME FOREXPR NAME DO new_scope statements end_scope END
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression GREATER expression
    (19) expression -> . expression LESS expression
    (20) expression -> . expression GREATEQ expression
    (21) expression -> . expression LESSEQ expression
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . MINUS expression
    (25) expression -> . PARENL new_scope expression end_scope PARENR
    (26) expression -> . INT
    (27) expression -> . DOUBLE
    (28) expression -> . CHAR
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . STRING
    (32) expression -> . NAME
    (34) new_scope -> . empty
    (33) empty -> .

    CONSTANT        shift and go to state 1
    NAME            shift and go to state 14
    DEF             shift and go to state 6
    FOR             shift and go to state 11
    MINUS           shift and go to state 5
    PARENL          shift and go to state 12
    INT             shift and go to state 15
    DOUBLE          shift and go to state 16
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    STRING          shift and go to state 7
    IF              reduce using rule 33 (empty -> .)

    statements                     shift and go to state 83
    new_scope                      shift and go to state 8
    statement                      shift and go to state 9
    expression                     shift and go to state 17
    empty                          shift and go to state 10

state 78

    (6) statement -> NAME EQUALS expression PARENL expression PARENR .

    CONSTANT        reduce using rule 6 (statement -> NAME EQUALS expression PARENL expression PARENR .)
    NAME            reduce using rule 6 (statement -> NAME EQUALS expression PARENL expression PARENR .)
    DEF             reduce using rule 6 (statement -> NAME EQUALS expression PARENL expression PARENR .)
    FOR             reduce using rule 6 (statement -> NAME EQUALS expression PARENL expression PARENR .)
    END             reduce using rule 6 (statement -> NAME EQUALS expression PARENL expression PARENR .)
    IF              reduce using rule 6 (statement -> NAME EQUALS expression PARENL expression PARENR .)
    $end            reduce using rule 6 (statement -> NAME EQUALS expression PARENL expression PARENR .)
    ELSE            reduce using rule 6 (statement -> NAME EQUALS expression PARENL expression PARENR .)


state 79

    (9) statement -> DEF NAME DO new_scope statements end_scope END .

    CONSTANT        reduce using rule 9 (statement -> DEF NAME DO new_scope statements end_scope END .)
    NAME            reduce using rule 9 (statement -> DEF NAME DO new_scope statements end_scope END .)
    DEF             reduce using rule 9 (statement -> DEF NAME DO new_scope statements end_scope END .)
    FOR             reduce using rule 9 (statement -> DEF NAME DO new_scope statements end_scope END .)
    END             reduce using rule 9 (statement -> DEF NAME DO new_scope statements end_scope END .)
    IF              reduce using rule 9 (statement -> DEF NAME DO new_scope statements end_scope END .)
    $end            reduce using rule 9 (statement -> DEF NAME DO new_scope statements end_scope END .)
    ELSE            reduce using rule 9 (statement -> DEF NAME DO new_scope statements end_scope END .)


state 80

    (7) statement -> DEF NAME PARENL NAME PARENR DO new_scope . statements end_scope END
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statements -> . expression
    (4) statement -> . CONSTANT expression
    (5) statement -> . NAME EQUALS expression
    (6) statement -> . NAME EQUALS expression PARENL expression PARENR
    (7) statement -> . DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (8) statement -> . DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
    (9) statement -> . DEF NAME DO new_scope statements end_scope END
    (10) statement -> . new_scope if_statement end_scope
    (13) statement -> . FOR NAME FOREXPR NAME DO new_scope statements end_scope END
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression GREATER expression
    (19) expression -> . expression LESS expression
    (20) expression -> . expression GREATEQ expression
    (21) expression -> . expression LESSEQ expression
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . MINUS expression
    (25) expression -> . PARENL new_scope expression end_scope PARENR
    (26) expression -> . INT
    (27) expression -> . DOUBLE
    (28) expression -> . CHAR
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . STRING
    (32) expression -> . NAME
    (34) new_scope -> . empty
    (33) empty -> .

    CONSTANT        shift and go to state 1
    NAME            shift and go to state 14
    DEF             shift and go to state 6
    FOR             shift and go to state 11
    MINUS           shift and go to state 5
    PARENL          shift and go to state 12
    INT             shift and go to state 15
    DOUBLE          shift and go to state 16
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    STRING          shift and go to state 7
    IF              reduce using rule 33 (empty -> .)

    statements                     shift and go to state 84
    new_scope                      shift and go to state 8
    statement                      shift and go to state 9
    expression                     shift and go to state 17
    empty                          shift and go to state 10

state 81

    (8) statement -> DEF NAME PARENL empty PARENR DO new_scope . statements end_scope END
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statements -> . expression
    (4) statement -> . CONSTANT expression
    (5) statement -> . NAME EQUALS expression
    (6) statement -> . NAME EQUALS expression PARENL expression PARENR
    (7) statement -> . DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (8) statement -> . DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
    (9) statement -> . DEF NAME DO new_scope statements end_scope END
    (10) statement -> . new_scope if_statement end_scope
    (13) statement -> . FOR NAME FOREXPR NAME DO new_scope statements end_scope END
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression GREATER expression
    (19) expression -> . expression LESS expression
    (20) expression -> . expression GREATEQ expression
    (21) expression -> . expression LESSEQ expression
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . MINUS expression
    (25) expression -> . PARENL new_scope expression end_scope PARENR
    (26) expression -> . INT
    (27) expression -> . DOUBLE
    (28) expression -> . CHAR
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . STRING
    (32) expression -> . NAME
    (34) new_scope -> . empty
    (33) empty -> .

    CONSTANT        shift and go to state 1
    NAME            shift and go to state 14
    DEF             shift and go to state 6
    FOR             shift and go to state 11
    MINUS           shift and go to state 5
    PARENL          shift and go to state 12
    INT             shift and go to state 15
    DOUBLE          shift and go to state 16
    CHAR            shift and go to state 2
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    STRING          shift and go to state 7
    IF              reduce using rule 33 (empty -> .)

    statements                     shift and go to state 85
    new_scope                      shift and go to state 8
    statement                      shift and go to state 9
    expression                     shift and go to state 17
    empty                          shift and go to state 10

state 82

    (12) if_statement -> IF expression DO statements ELSE statements . END
    (1) statements -> statements . statement
    (4) statement -> . CONSTANT expression
    (5) statement -> . NAME EQUALS expression
    (6) statement -> . NAME EQUALS expression PARENL expression PARENR
    (7) statement -> . DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (8) statement -> . DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
    (9) statement -> . DEF NAME DO new_scope statements end_scope END
    (10) statement -> . new_scope if_statement end_scope
    (13) statement -> . FOR NAME FOREXPR NAME DO new_scope statements end_scope END
    (34) new_scope -> . empty
    (33) empty -> .

    END             shift and go to state 86
    CONSTANT        shift and go to state 1
    NAME            shift and go to state 20
    DEF             shift and go to state 6
    FOR             shift and go to state 11
    IF              reduce using rule 33 (empty -> .)

    new_scope                      shift and go to state 8
    statement                      shift and go to state 21
    empty                          shift and go to state 10

state 83

    (13) statement -> FOR NAME FOREXPR NAME DO new_scope statements . end_scope END
    (1) statements -> statements . statement
    (35) end_scope -> . empty
    (4) statement -> . CONSTANT expression
    (5) statement -> . NAME EQUALS expression
    (6) statement -> . NAME EQUALS expression PARENL expression PARENR
    (7) statement -> . DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (8) statement -> . DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
    (9) statement -> . DEF NAME DO new_scope statements end_scope END
    (10) statement -> . new_scope if_statement end_scope
    (13) statement -> . FOR NAME FOREXPR NAME DO new_scope statements end_scope END
    (33) empty -> .
    (34) new_scope -> . empty

    CONSTANT        shift and go to state 1
    NAME            shift and go to state 20
    DEF             shift and go to state 6
    FOR             shift and go to state 11
    END             reduce using rule 33 (empty -> .)
    IF              reduce using rule 33 (empty -> .)

    end_scope                      shift and go to state 87
    new_scope                      shift and go to state 8
    statement                      shift and go to state 21
    empty                          shift and go to state 72

state 84

    (7) statement -> DEF NAME PARENL NAME PARENR DO new_scope statements . end_scope END
    (1) statements -> statements . statement
    (35) end_scope -> . empty
    (4) statement -> . CONSTANT expression
    (5) statement -> . NAME EQUALS expression
    (6) statement -> . NAME EQUALS expression PARENL expression PARENR
    (7) statement -> . DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (8) statement -> . DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
    (9) statement -> . DEF NAME DO new_scope statements end_scope END
    (10) statement -> . new_scope if_statement end_scope
    (13) statement -> . FOR NAME FOREXPR NAME DO new_scope statements end_scope END
    (33) empty -> .
    (34) new_scope -> . empty

    CONSTANT        shift and go to state 1
    NAME            shift and go to state 20
    DEF             shift and go to state 6
    FOR             shift and go to state 11
    END             reduce using rule 33 (empty -> .)
    IF              reduce using rule 33 (empty -> .)

    end_scope                      shift and go to state 88
    new_scope                      shift and go to state 8
    statement                      shift and go to state 21
    empty                          shift and go to state 72

state 85

    (8) statement -> DEF NAME PARENL empty PARENR DO new_scope statements . end_scope END
    (1) statements -> statements . statement
    (35) end_scope -> . empty
    (4) statement -> . CONSTANT expression
    (5) statement -> . NAME EQUALS expression
    (6) statement -> . NAME EQUALS expression PARENL expression PARENR
    (7) statement -> . DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END
    (8) statement -> . DEF NAME PARENL empty PARENR DO new_scope statements end_scope END
    (9) statement -> . DEF NAME DO new_scope statements end_scope END
    (10) statement -> . new_scope if_statement end_scope
    (13) statement -> . FOR NAME FOREXPR NAME DO new_scope statements end_scope END
    (33) empty -> .
    (34) new_scope -> . empty

    CONSTANT        shift and go to state 1
    NAME            shift and go to state 20
    DEF             shift and go to state 6
    FOR             shift and go to state 11
    END             reduce using rule 33 (empty -> .)
    IF              reduce using rule 33 (empty -> .)

    end_scope                      shift and go to state 89
    new_scope                      shift and go to state 8
    statement                      shift and go to state 21
    empty                          shift and go to state 72

state 86

    (12) if_statement -> IF expression DO statements ELSE statements END .

    CONSTANT        reduce using rule 12 (if_statement -> IF expression DO statements ELSE statements END .)
    NAME            reduce using rule 12 (if_statement -> IF expression DO statements ELSE statements END .)
    DEF             reduce using rule 12 (if_statement -> IF expression DO statements ELSE statements END .)
    FOR             reduce using rule 12 (if_statement -> IF expression DO statements ELSE statements END .)
    $end            reduce using rule 12 (if_statement -> IF expression DO statements ELSE statements END .)
    IF              reduce using rule 12 (if_statement -> IF expression DO statements ELSE statements END .)
    END             reduce using rule 12 (if_statement -> IF expression DO statements ELSE statements END .)
    ELSE            reduce using rule 12 (if_statement -> IF expression DO statements ELSE statements END .)


state 87

    (13) statement -> FOR NAME FOREXPR NAME DO new_scope statements end_scope . END

    END             shift and go to state 90


state 88

    (7) statement -> DEF NAME PARENL NAME PARENR DO new_scope statements end_scope . END

    END             shift and go to state 91


state 89

    (8) statement -> DEF NAME PARENL empty PARENR DO new_scope statements end_scope . END

    END             shift and go to state 92


state 90

    (13) statement -> FOR NAME FOREXPR NAME DO new_scope statements end_scope END .

    CONSTANT        reduce using rule 13 (statement -> FOR NAME FOREXPR NAME DO new_scope statements end_scope END .)
    NAME            reduce using rule 13 (statement -> FOR NAME FOREXPR NAME DO new_scope statements end_scope END .)
    DEF             reduce using rule 13 (statement -> FOR NAME FOREXPR NAME DO new_scope statements end_scope END .)
    FOR             reduce using rule 13 (statement -> FOR NAME FOREXPR NAME DO new_scope statements end_scope END .)
    END             reduce using rule 13 (statement -> FOR NAME FOREXPR NAME DO new_scope statements end_scope END .)
    IF              reduce using rule 13 (statement -> FOR NAME FOREXPR NAME DO new_scope statements end_scope END .)
    $end            reduce using rule 13 (statement -> FOR NAME FOREXPR NAME DO new_scope statements end_scope END .)
    ELSE            reduce using rule 13 (statement -> FOR NAME FOREXPR NAME DO new_scope statements end_scope END .)


state 91

    (7) statement -> DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END .

    CONSTANT        reduce using rule 7 (statement -> DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END .)
    NAME            reduce using rule 7 (statement -> DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END .)
    DEF             reduce using rule 7 (statement -> DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END .)
    FOR             reduce using rule 7 (statement -> DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END .)
    END             reduce using rule 7 (statement -> DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END .)
    IF              reduce using rule 7 (statement -> DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END .)
    $end            reduce using rule 7 (statement -> DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END .)
    ELSE            reduce using rule 7 (statement -> DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END .)


state 92

    (8) statement -> DEF NAME PARENL empty PARENR DO new_scope statements end_scope END .

    CONSTANT        reduce using rule 8 (statement -> DEF NAME PARENL empty PARENR DO new_scope statements end_scope END .)
    NAME            reduce using rule 8 (statement -> DEF NAME PARENL empty PARENR DO new_scope statements end_scope END .)
    DEF             reduce using rule 8 (statement -> DEF NAME PARENL empty PARENR DO new_scope statements end_scope END .)
    FOR             reduce using rule 8 (statement -> DEF NAME PARENL empty PARENR DO new_scope statements end_scope END .)
    END             reduce using rule 8 (statement -> DEF NAME PARENL empty PARENR DO new_scope statements end_scope END .)
    IF              reduce using rule 8 (statement -> DEF NAME PARENL empty PARENR DO new_scope statements end_scope END .)
    $end            reduce using rule 8 (statement -> DEF NAME PARENL empty PARENR DO new_scope statements end_scope END .)
    ELSE            reduce using rule 8 (statement -> DEF NAME PARENL empty PARENR DO new_scope statements end_scope END .)

