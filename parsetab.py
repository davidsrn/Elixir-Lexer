
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftDOENDANDORIFELSEFORTRUEFALSEFOREXPRNAMEleftEQUALSCONSTANTCHARINTSTRINGDOUBLEleftGREATERLESSGREATEQLESSEQleftPLUSMINUSleftTIMESDIVIDEleftPARENLPARENRrightUMINUSAND CHAR CONSTANT DEF DEQUALS DIVIDE DO DOUBLE ELSE END EQUALS FALSE FOR FOREXPR GREATEQ GREATER IF INT LESS LESSEQ MINUS NAME OR PARENL PARENR PLUS STRING TIMES TRUEstatements : statements statement\n        | statement\n        | expressionstatement : CONSTANT expression\n                 statement : NAME EQUALS expression\n                 | NAME EQUALS expression PARENL expression PARENR\n                 statement : DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END\n                 | DEF NAME PARENL empty PARENR DO new_scope statements end_scope END\n                 | DEF NAME DO new_scope statements end_scope ENDstatement : new_scope if_statement end_scopeif_statement : IF expression DO statements END\n                 | IF expression DO statements ELSE statements END\n                 statement : FOR NAME FOREXPR NAME DO new_scope statements end_scope ENDexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression GREATER expression\n                  | expression LESS expression\n                  | expression GREATEQ expression\n                  | expression LESSEQ expression\n                  | expression AND expression\n                  | expression OR expression\n                  | expression DEQUALS expression\n                  expression : MINUS expression %prec UMINUSexpression : PARENL new_scope expression end_scope PARENRexpression : INTexpression : DOUBLEexpression : CHARexpression : TRUEexpression : FALSEexpression : STRINGexpression : NAMEempty :new_scope : empty end_scope : empty'
    
_lr_action_items = {'DO':([3,6,12,13,15,16,18,22,23,44,48,49,50,51,52,53,54,55,56,57,58,63,67,68,71,],[-30,-32,-29,-31,-27,-28,-33,-25,40,62,-22,-23,-17,-20,-19,-16,-24,-21,-14,-15,-18,70,75,76,-26,]),'CONSTANT':([0,2,3,6,8,9,12,13,14,15,16,17,18,19,21,22,24,40,42,43,47,48,49,50,51,52,53,54,55,56,57,58,59,62,66,69,70,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,94,],[1,1,-30,-32,-2,-35,-29,-31,-33,-27,-28,-3,-33,-4,-1,-25,-34,-34,-36,-10,-5,-22,-23,-17,-20,-19,-16,-24,-21,-14,-15,-18,1,1,1,1,-34,-26,-34,-34,-11,1,1,-6,-9,1,1,1,1,1,1,-12,-13,-7,-8,]),'LESS':([3,6,12,13,14,15,16,17,18,19,22,44,46,47,48,49,50,51,52,53,54,55,56,57,58,71,72,],[-30,-32,-29,-31,-33,-27,-28,33,-33,33,-25,33,33,33,33,33,-17,-20,-19,-16,33,-21,-14,-15,-18,-26,33,]),'DEQUALS':([3,6,12,13,14,15,16,17,18,19,22,44,46,47,48,49,50,51,52,53,54,55,56,57,58,71,72,],[-30,-32,-29,-31,-33,-27,-28,35,-33,35,-25,35,35,35,-22,-23,-17,-20,-19,-16,35,-21,-14,-15,-18,-26,35,]),'FOREXPR':([26,],[45,]),'TRUE':([0,1,4,9,11,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,59,62,65,70,75,76,78,79,82,83,],[3,3,3,-35,-34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,-34,3,3,3,-34,-34,-34,3,3,3,3,]),'MINUS':([0,1,3,4,6,9,11,12,13,14,15,16,17,18,19,22,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,62,65,70,71,72,75,76,78,79,82,83,],[4,4,-30,4,-32,-35,-34,-29,-31,-33,-27,-28,38,-33,38,-25,4,4,4,4,4,4,4,4,4,4,4,4,4,4,-34,38,38,38,38,38,-17,38,38,-16,38,38,-14,-15,38,4,4,4,-34,-26,38,-34,-34,4,4,4,4,]),'DEF':([0,2,3,6,8,9,12,13,14,15,16,17,18,19,21,22,24,40,42,43,47,48,49,50,51,52,53,54,55,56,57,58,59,62,66,69,70,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,94,],[5,5,-30,-32,-2,-35,-29,-31,-33,-27,-28,-3,-33,-4,-1,-25,-34,-34,-36,-10,-5,-22,-23,-17,-20,-19,-16,-24,-21,-14,-15,-18,5,5,5,5,-34,-26,-34,-34,-11,5,5,-6,-9,5,5,5,5,5,5,-12,-13,-7,-8,]),'STRING':([0,1,4,9,11,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,59,62,65,70,75,76,78,79,82,83,],[6,6,6,-35,-34,6,6,6,6,6,6,6,6,6,6,6,6,6,6,-34,6,6,6,-34,-34,-34,6,6,6,6,]),'PLUS':([3,6,12,13,14,15,16,17,18,19,22,44,46,47,48,49,50,51,52,53,54,55,56,57,58,71,72,],[-30,-32,-29,-31,-33,-27,-28,37,-33,37,-25,37,37,37,37,37,-17,37,37,-16,37,37,-14,-15,37,-26,37,]),'IF':([0,2,3,6,7,8,9,12,13,14,15,16,17,18,19,21,22,24,40,42,43,47,48,49,50,51,52,53,54,55,56,57,58,59,62,66,69,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,94,],[-34,-34,-30,-32,25,-2,-35,-29,-31,-33,-27,-28,-3,-33,-4,-1,-25,-34,-34,-36,-10,-5,-22,-23,-17,-20,-19,-16,-24,-21,-14,-15,-18,-34,-34,-34,-34,-34,-26,-35,-34,-34,-11,-34,-34,-6,-9,-34,-34,-34,-34,-34,-34,-12,-13,-7,-8,]),'$end':([2,3,6,8,12,13,14,15,16,17,18,19,21,22,24,42,43,47,48,49,50,51,52,53,54,55,56,57,58,71,77,80,81,88,92,93,94,],[0,-30,-32,-2,-29,-31,-33,-27,-28,-3,-33,-4,-1,-25,-34,-36,-10,-5,-22,-23,-17,-20,-19,-16,-24,-21,-14,-15,-18,-26,-11,-6,-9,-12,-13,-7,-8,]),'PARENR':([3,6,12,13,15,16,18,22,41,42,46,48,49,50,51,52,53,54,55,56,57,58,60,61,64,71,72,],[-30,-32,-29,-31,-27,-28,-33,-25,-34,-36,-34,-22,-23,-17,-20,-19,-16,-24,-21,-14,-15,-18,67,68,71,-26,80,]),'END':([3,6,8,12,13,14,15,16,17,18,19,21,22,24,42,43,47,48,49,50,51,52,53,54,55,56,57,58,66,69,71,73,74,77,80,81,84,85,86,87,88,89,90,91,92,93,94,],[-30,-32,-2,-29,-31,-33,-27,-28,-3,-33,-4,-1,-25,-34,-36,-10,-5,-22,-23,-17,-20,-19,-16,-24,-21,-14,-15,-18,-34,77,-26,81,-36,-11,-6,-9,88,-34,-34,-34,-12,92,93,94,-13,-7,-8,]),'DIVIDE':([3,6,12,13,14,15,16,17,18,19,22,44,46,47,48,49,50,51,52,53,54,55,56,57,58,71,72,],[-30,-32,-29,-31,-33,-27,-28,31,-33,31,-25,31,31,31,31,31,-17,31,31,-16,31,31,31,31,31,-26,31,]),'FOR':([0,2,3,6,8,9,12,13,14,15,16,17,18,19,21,22,24,40,42,43,47,48,49,50,51,52,53,54,55,56,57,58,59,62,66,69,70,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,94,],[10,10,-30,-32,-2,-35,-29,-31,-33,-27,-28,-3,-33,-4,-1,-25,-34,-34,-36,-10,-5,-22,-23,-17,-20,-19,-16,-24,-21,-14,-15,-18,10,10,10,10,-34,-26,-34,-34,-11,10,10,-6,-9,10,10,10,10,10,10,-12,-13,-7,-8,]),'EQUALS':([14,20,],[28,28,]),'ELSE':([3,6,8,12,13,14,15,16,17,18,19,21,22,24,42,43,47,48,49,50,51,52,53,54,55,56,57,58,69,71,77,80,81,88,92,93,94,],[-30,-32,-2,-29,-31,-33,-27,-28,-3,-33,-4,-1,-25,-34,-36,-10,-5,-22,-23,-17,-20,-19,-16,-24,-21,-14,-15,-18,78,-26,-11,-6,-9,-12,-13,-7,-8,]),'TIMES':([3,6,12,13,14,15,16,17,18,19,22,44,46,47,48,49,50,51,52,53,54,55,56,57,58,71,72,],[-30,-32,-29,-31,-33,-27,-28,34,-33,34,-25,34,34,34,34,34,-17,34,34,-16,34,34,34,34,34,-26,34,]),'PARENL':([0,1,3,4,6,9,11,12,13,15,16,18,22,23,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,47,48,49,50,51,52,53,54,55,56,57,58,59,62,65,70,71,75,76,78,79,82,83,],[11,11,-30,11,-32,-35,-34,-29,-31,-27,-28,-33,-25,41,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-34,65,-22,-23,-17,-20,-19,-16,-24,-21,-14,-15,-18,11,11,11,-34,-26,-34,-34,11,11,11,11,]),'GREATER':([3,6,12,13,14,15,16,17,18,19,22,44,46,47,48,49,50,51,52,53,54,55,56,57,58,71,72,],[-30,-32,-29,-31,-33,-27,-28,39,-33,39,-25,39,39,39,39,39,-17,-20,-19,-16,39,-21,-14,-15,-18,-26,39,]),'AND':([3,6,12,13,14,15,16,17,18,19,22,44,46,47,48,49,50,51,52,53,54,55,56,57,58,71,72,],[-30,-32,-29,-31,-33,-27,-28,29,-33,29,-25,29,29,29,-22,-23,-17,-20,-19,-16,29,-21,-14,-15,-18,-26,29,]),'CHAR':([0,1,4,9,11,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,59,62,65,70,75,76,78,79,82,83,],[12,12,12,-35,-34,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-34,12,12,12,-34,-34,-34,12,12,12,12,]),'FALSE':([0,1,4,9,11,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,59,62,65,70,75,76,78,79,82,83,],[13,13,13,-35,-34,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-34,13,13,13,-34,-34,-34,13,13,13,13,]),'NAME':([0,1,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,21,22,24,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,47,48,49,50,51,52,53,54,55,56,57,58,59,62,65,66,69,70,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,94,],[14,18,20,-30,18,23,-32,-2,-35,26,-34,-29,-31,-33,-27,-28,-3,-33,-4,-1,-25,-34,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-34,60,-36,-10,63,-5,-22,-23,-17,-20,-19,-16,-24,-21,-14,-15,-18,14,14,18,20,20,-34,-26,-34,-34,-11,14,14,-6,-9,14,14,20,20,20,20,-12,-13,-7,-8,]),'GREATEQ':([3,6,12,13,14,15,16,17,18,19,22,44,46,47,48,49,50,51,52,53,54,55,56,57,58,71,72,],[-30,-32,-29,-31,-33,-27,-28,32,-33,32,-25,32,32,32,32,32,-17,-20,-19,-16,32,-21,-14,-15,-18,-26,32,]),'INT':([0,1,4,9,11,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,59,62,65,70,75,76,78,79,82,83,],[15,15,15,-35,-34,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-34,15,15,15,-34,-34,-34,15,15,15,15,]),'DOUBLE':([0,1,4,9,11,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,59,62,65,70,75,76,78,79,82,83,],[16,16,16,-35,-34,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-34,16,16,16,-34,-34,-34,16,16,16,16,]),'LESSEQ':([3,6,12,13,14,15,16,17,18,19,22,44,46,47,48,49,50,51,52,53,54,55,56,57,58,71,72,],[-30,-32,-29,-31,-33,-27,-28,36,-33,36,-25,36,36,36,36,36,-17,-20,-19,-16,36,-21,-14,-15,-18,-26,36,]),'OR':([3,6,12,13,14,15,16,17,18,19,22,44,46,47,48,49,50,51,52,53,54,55,56,57,58,71,72,],[-30,-32,-29,-31,-33,-27,-28,30,-33,30,-25,30,30,30,-22,-23,-17,-20,-19,-16,30,-21,-14,-15,-18,-26,30,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,59,62,78,79,82,83,],[2,66,69,84,85,86,87,]),'end_scope':([24,46,66,85,86,87,],[43,64,73,89,90,91,]),'new_scope':([0,2,11,40,59,62,66,69,70,75,76,78,79,82,83,84,85,86,87,],[7,7,27,59,7,7,7,7,79,82,83,7,7,7,7,7,7,7,7,]),'statement':([0,2,59,62,66,69,78,79,82,83,84,85,86,87,],[8,21,8,8,21,21,8,8,8,8,21,21,21,21,]),'if_statement':([7,],[24,]),'expression':([0,1,4,25,27,28,29,30,31,32,33,34,35,36,37,38,39,59,62,65,78,79,82,83,],[17,19,22,44,46,47,48,49,50,51,52,53,54,55,56,57,58,17,17,72,17,17,17,17,]),'empty':([0,2,11,24,40,41,46,59,62,66,69,70,75,76,78,79,82,83,84,85,86,87,],[9,9,9,42,9,61,42,9,9,74,9,9,9,9,9,9,9,9,9,74,74,74,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statements","S'",1,None,None,None),
  ('statements -> statements statement','statements',2,'p_expr','parser.py',188),
  ('statements -> statement','statements',1,'p_expr','parser.py',189),
  ('statements -> expression','statements',1,'p_expr','parser.py',190),
  ('statement -> CONSTANT expression','statement',2,'p_assign_cons','parser.py',202),
  ('statement -> NAME EQUALS expression','statement',3,'p_assign_var','parser.py',210),
  ('statement -> NAME EQUALS expression PARENL expression PARENR','statement',6,'p_assign_var','parser.py',211),
  ('statement -> DEF NAME PARENL NAME PARENR DO new_scope statements end_scope END','statement',10,'p_func','parser.py',219),
  ('statement -> DEF NAME PARENL empty PARENR DO new_scope statements end_scope END','statement',10,'p_func','parser.py',220),
  ('statement -> DEF NAME DO new_scope statements end_scope END','statement',7,'p_func','parser.py',221),
  ('statement -> new_scope if_statement end_scope','statement',3,'p_if_scope','parser.py',232),
  ('if_statement -> IF expression DO statements END','if_statement',5,'p_if','parser.py',236),
  ('if_statement -> IF expression DO statements ELSE statements END','if_statement',7,'p_if','parser.py',237),
  ('statement -> FOR NAME FOREXPR NAME DO new_scope statements end_scope END','statement',9,'p_for','parser.py',249),
  ('expression -> expression PLUS expression','expression',3,'p_binary','parser.py',262),
  ('expression -> expression MINUS expression','expression',3,'p_binary','parser.py',263),
  ('expression -> expression TIMES expression','expression',3,'p_binary','parser.py',264),
  ('expression -> expression DIVIDE expression','expression',3,'p_binary','parser.py',265),
  ('expression -> expression GREATER expression','expression',3,'p_binary','parser.py',266),
  ('expression -> expression LESS expression','expression',3,'p_binary','parser.py',267),
  ('expression -> expression GREATEQ expression','expression',3,'p_binary','parser.py',268),
  ('expression -> expression LESSEQ expression','expression',3,'p_binary','parser.py',269),
  ('expression -> expression AND expression','expression',3,'p_binary','parser.py',270),
  ('expression -> expression OR expression','expression',3,'p_binary','parser.py',271),
  ('expression -> expression DEQUALS expression','expression',3,'p_binary','parser.py',272),
  ('expression -> MINUS expression','expression',2,'p_minus','parser.py',307),
  ('expression -> PARENL new_scope expression end_scope PARENR','expression',5,'p_group','parser.py',313),
  ('expression -> INT','expression',1,'p_int','parser.py',319),
  ('expression -> DOUBLE','expression',1,'p_double','parser.py',325),
  ('expression -> CHAR','expression',1,'p_char','parser.py',331),
  ('expression -> TRUE','expression',1,'p_true','parser.py',337),
  ('expression -> FALSE','expression',1,'p_false','parser.py',343),
  ('expression -> STRING','expression',1,'p_string','parser.py',349),
  ('expression -> NAME','expression',1,'p_name','parser.py',355),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',363),
  ('new_scope -> empty','new_scope',1,'p_new_scope','parser.py',367),
  ('end_scope -> empty','end_scope',1,'p_end_scope','parser.py',371),
]
